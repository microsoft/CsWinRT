<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <PrepareForBuildDependsOn>
      UpdateStringSources;UpdateStringsHeader;$(PrepareForBuildDependsOn)
    </PrepareForBuildDependsOn>
  </PropertyGroup>

  <UsingTask TaskName="WriteStringSources"
        TaskFactory="RoslynCodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <Input ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Namespace Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[  
        foreach(ITaskItem item in Input)  
        {  
          var content = item.GetMetadata("Content");
          var source = item.GetMetadata("Source");
          var ns = item.GetMetadata("Namespace");
          var file = item.GetMetadata("File");
          var global = file.Replace('.', '_');
          if (!string.IsNullOrEmpty(ns))
          {
            global = ns.Replace('.', '_') + "_" + global;
          }
          Log.LogMessage(MessageImportance.High, "Writing {0}", source);
          Directory.CreateDirectory(new FileInfo(source).DirectoryName);
          File.WriteAllLines(source, GetContentLines(content));
          IEnumerable<string> GetContentLines(string file)
          {
            yield return "// This file was generated by the build.";
            yield return "#include \"pch.h\"";
            yield return "namespace " + Namespace + "::strings {";
            yield return "extern char const " + global + "[] = R\"xyz(";
            int count = 0;
            foreach(string line in File.ReadLines(file))
            {
              count += line.Length + 2;
              if(count > 16000)
              {
                yield return ")xyz\" R\"xyz(" + line;
                count = line.Length;
              }
              else
              {
                yield return line;
              }
            }
            yield return ")xyz\";";
            yield return "}";
          }
        }  
]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="WriteStringsHeader"
        TaskFactory="RoslynCodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <Input ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Header Required="true" />
      <Namespace Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[  
        var lines = new List<string>();
        lines.Add("// " + Namespace + " static string declarations. This file was generated by the build.");
        lines.Add("#pragma once");
        lines.Add("namespace " + Namespace + "::strings");
        lines.Add("{");
        foreach(var index in Input.GroupBy(item => item.GetMetadata("Index")))
        {
          foreach(ITaskItem item in index)  
          {  
            var content = item.GetMetadata("Content");
            var ns = item.GetMetadata("Namespace");
            var file = item.GetMetadata("File");
            var global = file.Replace('.', '_');
            if (!string.IsNullOrEmpty(ns))
            {
              global = ns.Replace('.', '_') + "_" + global;
            }
            var fileSize = new FileInfo(content).Length;
            lines.Add("    extern char const " + global + "[" + fileSize + "];");
          } 
          lines.Add("    static const struct");
          lines.Add("    {");
          lines.Add("        char const* name;");
          lines.Add("        char const* value;");
          lines.Add("    } " + (index.Key == "" ? "base" : index.Key.Trim('\\')) +"[] = {");
          var delimeter = "";
          foreach(ITaskItem item in index)  
          {
            var ns = item.GetMetadata("Namespace");
            var file = item.GetMetadata("File");
            var key = ns;
            if (string.IsNullOrEmpty(key))
            {
              key = file;
            }
            var global = file.Replace('.', '_');
            if (!string.IsNullOrEmpty(ns))
            {
              global = ns.Replace('.', '_') + "_" + global;
            }
            lines.Add("        " + delimeter + "{\"" + key + "\", " + global + "}");
            delimeter = ", ";
          }  
          lines.Add("    };");
        }
        lines.Add("}");
        if (File.Exists(Header))
        {
          var existing = File.ReadAllLines(Header);
          if(existing.SequenceEqual(lines))
          {
            Log.LogMessage(MessageImportance.Low, "{0} already up-to-date", Header);
            return true;
          }          
        }
        Log.LogMessage(MessageImportance.High, "Writing {0}", Header);
        Directory.CreateDirectory(new FileInfo(Header).DirectoryName);
        File.WriteAllLines(Header, lines);
]]>
      </Code>
    </Task>
  </UsingTask>

  <ItemGroup>
    <StaticStringSpec Include="$(SolutionDir)\strings\**\*.*;$(MSBuildProjectDirectory)\strings\**\*.*" />
    <StaticStringDirs Include="@(StaticStringSpec->'%(RootDir)%(Directory)'->Distinct())" />
    <StaticStrings Include="@(StaticStringSpec->'%(FullPath)'->Distinct())">
      <Content>%(Identity)</Content>
      <Source>$([System.String]::new('$(IntDir)strings\%(RecursiveDir)%(Filename).cpp'))</Source>
      <File>$([System.String]::new('%(Filename)'))</File>
    </StaticStrings>
    <Filter Include="strings" />
    <ClCompile Include="@(StaticStrings->'%(Source)')">
      <Filter>strings</Filter>
    </ClCompile>
    <ClInclude Include="$(IntDir)strings.h" />
  </ItemGroup>

  <Target Name="SetStaticStringIndex">
    <ItemGroup>
      <StaticStrings Condition="'%(RecursiveDir)' != ''">
        <Path>%(RecursiveDir)</Path>
        <Index>$([System.IO.Path]::GetDirectoryName($([System.IO.Path]::GetDirectoryName($([System.String]::new('%(RecursiveDir)'))))))</Index>
        <Namespace>$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName($([System.String]::new('%(RecursiveDir)'))))))</Namespace>
      </StaticStrings>
    </ItemGroup>
  </Target>

  <Target Name="UpdateStringSources" BeforeTargets="Build;PrepareForBuild;ClCompile"
          DependsOnTargets="SetStaticStringIndex"
          Condition="@(StaticStrings->Count()) >= 1"
          Inputs="@(StaticStrings)" 
          Outputs="%(Source)">
    <WriteLinesToFile Encoding="Unicode"
      File="$(TLogLocation)strings.read.1.tlog"
      Lines="@(StaticStrings->'^%(Source)');@(StaticStrings->'%(Identity)')"/>
    <WriteLinesToFile Encoding="Unicode"
      File="$(TLogLocation)strings.write.1.tlog"
      Lines="@(StaticStrings->'^%(Identity)');@(StaticStrings->'%(Source)')"/>
    <Message Text="Static strings:&#x0d;&#x0a;@(StaticStrings->'%(File): %(Content), %(Source)','&#x0d;&#x0a;')" Importance="High"/>
    <WriteStringSources Input="@(StaticStrings)" Namespace="$(RootNamespace)"/>
  </Target>

  <Target Name="UpdateStringsHeader" BeforeTargets="Build;PrepareForBuild;ClCompile"
          DependsOnTargets="SetStaticStringIndex"
          Condition="@(StaticStrings->Count()) >= 1"
          Inputs="@(StaticStringDirs)"
          Outputs="$(IntDir)strings.h">
    <PropertyGroup>
      <StaticStringDirList>@(StaticStringDirs,'|')</StaticStringDirList>
    </PropertyGroup>
    <WriteLinesToFile Encoding="Unicode"
      File="$(TLogLocation)strings.read.1.tlog"
      Lines="^$(IntDir)strings.h;@(StaticStringDirs)"/>
    <WriteLinesToFile Encoding="Unicode"
      File="$(TLogLocation)strings.write.1.tlog"
      Lines="^$(StaticStringDirList);$(IntDir)strings.h"/>
    <WriteStringsHeader Input="@(StaticStrings)" Header="$(IntDir)strings.h" Namespace="$(RootNamespace)"/>
    <ItemGroup>
      <ClCompile>
        <AdditionalIncludeDirectories>%(AdditionalIncludeDirectories);$(IntDir)</AdditionalIncludeDirectories>
      </ClCompile>
    </ItemGroup>
  </Target>

</Project>
