jobs: 
  - job:
    displayName: Build/Test Stage
    pool:
      type: windows
      
    timeoutInMinutes: 270
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml#multi-job-configuration

    strategy:
      maxParallel: 10
      matrix:
        x64_Debug:
          BuildPlatform: 'x64'
          BuildConfiguration: 'debug'
        x86_Debug:
          BuildPlatform: 'x86'
          BuildConfiguration: 'debug'
        arm64_Debug:
          BuildPlatform: 'arm64'
          BuildConfiguration: 'debug'
        x64_Release:
          BuildPlatform: 'x64'
          BuildConfiguration: 'release'
        x86_Release:
          BuildPlatform: 'x86'
          BuildConfiguration: 'release'
        arm64_Release:
          BuildPlatform: 'arm64'
          BuildConfiguration: 'release' 
          
    variables:
      ob_outputDirectory: '$(Build.SourcesDirectory)\out'
      ob_artifactSuffix: $(BuildConfiguration)_$(BuildPlatform)
      StagingFolder: $(ob_outputDirectory)
      ob_sdl_prefast_enabled: true
      ob_sdl_prefast_runDuring: 'Build'
      ob_sdl_checkCompliantCompilerWarnings: true
      ob_symbolsPublishing_enabled: true
      ob_symbolsPublishing_indexSources: true
      ob_symbolsPublishing_searchPattern: '**/*.@(pdb|dll)'

    steps:
   
# Build Steps 
    - template: CsWinRT-Build-Steps.yml@self
      parameters:
        BuildConfiguration: $(BuildConfiguration)
        BuildPlatform: $(BuildPlatform) 

    - template: CsWinRT-Test-Steps.yml@self
      parameters:
        BuildConfiguration: $(BuildConfiguration)
        BuildPlatform: $(BuildPlatform) 

# Signing
    - task: onebranch.pipeline.signing@1
      displayName: 'ðŸ”’ Onebranch Signing for cswinrt binaries'
      condition: and(succeeded(), eq(variables['BuildConfiguration'], 'release'))
      inputs:
        command: sign
        signing_profile: external_distribution
        files_to_sign: |
          native/cswinrt.exe;
          native/WinRT.Interop.winmd;
          netstandard2.0/WinRT.Runtime.dll;
          netstandard2.0/WinRT.Host.Shim.dll;
          netstandard2.0/roslyn4080/WinRT.SourceGenerator.dll
          netstandard2.0/roslyn4120/WinRT.SourceGenerator.dll
          net8.0/WinRT.Host.Shim.dll;
          net8.0/WinRT.Runtime.dll;
          net9.0/WinRT.Runtime.dll;
          native/WinRT.Host.dll;
          native/WinRT.Host.dll.mui;
          net8.0/IIDOptimizer/IIDOptimizer.exe;
          net8.0/IIDOptimizer/IIDOptimizer.dll;
          net8.0/CsWinMD/CsWinMD.exe;
          net8.0/CsWinMD/CsWinMD.dll;
        search_root: $(StagingFolder)

# Signing 3rd Party
    - task: onebranch.pipeline.signing@1
      displayName: 'ðŸ”’ Onebranch Signing for 3rd party binaries'
      condition: and(succeeded(), eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildConfiguration'], 'release'))
      inputs:
        command: sign
        signing_profile: 135020002
        files_to_sign: |
          net8.0/IIDOptimizer/Mono.Cecil.dll;
          net8.0/IIDOptimizer/Mono.Cecil.Mdb.dll;
          net8.0/IIDOptimizer/Mono.Cecil.Pdb.dll;
          net8.0/IIDOptimizer/Mono.Cecil.Rocks.dll;
        search_root: $(StagingFolder)

  - job: Benchmarks
    displayName: Run Benchmarks
    condition: or(eq(variables['_RunBenchmarks'],'true'), eq(variables['Build.Reason'],'Schedule'))
    dependsOn: []
    pool:
      type: windows
      isCustom: true
      name: 'Azure Pipelines'
      vmImage: 'windows-2022'
    timeoutInMinutes: 120    
    variables:
      ob_outputDirectory: '$(Build.SourcesDirectory)\out'
      StagingFolder: $(ob_outputDirectory)
    steps:
    - template: CsWinRT-Benchmarks-Steps.yml@self

# Publish Benchmark Results
    - task: PublishPipelineArtifact@1
      displayName: Publish Benchmarks Results
      condition: always()
      inputs:
        targetPath: $(Build.SourcesDirectory)\src\BenchmarkDotNet.Artifacts\results\
        artifact: drop_BuildAndTest_Benchmarks

  # Seperate job to run certain tests
  # that can't run in the other environment.
  - job: Tests
    displayName: Run Tests
    dependsOn: []
    pool:
      type: windows
      isCustom: true
      name: 'Azure Pipelines'
      vmImage: 'windows-2022'
    timeoutInMinutes: 120
    strategy:
      matrix:
        debug:
          BuildConfiguration: 'debug'
        release:
          BuildConfiguration: 'release'
    variables:
      ob_outputDirectory: '$(Build.SourcesDirectory)\out'
      StagingFolder: $(ob_outputDirectory)
      BuildPlatform: 'x64' 
    steps:
# Build Steps 
    - template: CsWinRT-Build-Steps.yml@self
      parameters:
        BuildConfiguration: $(BuildConfiguration)
        BuildPlatform: $(BuildPlatform) 
        SetupForBuildOnly: true

    - task: MSBuild@1
      displayName: Build Object Lifetime Tests
      condition: succeeded()
      inputs:
        solution: $(Build.SourcesDirectory)\src\Tests\ObjectLifetimeTests\ObjectLifetimeTests.Lifted.csproj
        msbuildArguments: /restore /p:CIBuildReason=CI,solutiondir=$(Build.SourcesDirectory)\src\,VersionNumber=$(VersionNumber),VersionString=$(Build.BuildNumber),AssemblyVersionNumber=$(WinRT.Runtime.AssemblyVersion),GenerateTestProjection=true,AllowedReferenceRelatedFileExtensions=".xml;.pri;.dll.config;.exe.config"
        platform: $(BuildPlatform)
        configuration: $(BuildConfiguration)

# Run Object Lifetime Tests
    - task: VSTest@3
      displayName: Run Object Lifetime Tests
      condition: succeeded()
      inputs:
        testAssemblyVer2: Tests\ObjectLifetimeTests\bin\$(BuildPlatform)\$(BuildConfiguration)\net8.0-windows10.0.19041.0\win-$(BuildPlatform)\ObjectLifetimeTests.Lifted.build.appxrecipe
        searchFolder: $(Build.SourcesDirectory)\src

# Run Source Generator Tests
    - task: DotNetCoreCLI@2
      displayName: Run Source Generator Tests
      condition: succeeded()
      inputs:
        command: test
        projects: 'src/Tests/SourceGeneratorTest/SourceGeneratorTest.csproj'
        arguments: --diag $(StagingFolder)\unittest\test.log --logger trx;LogFilePath=UNITTEST-$(Build.BuildNumber).trx /nologo /m /p:configuration=$(BuildConfiguration);CIBuildReason=CI;solutiondir=$(Build.SourcesDirectory)\src\;VersionNumber=$(VersionNumber);VersionString=$(Build.BuildNumber);AssemblyVersionNumber=$(WinRT.Runtime.AssemblyVersion) -- RunConfiguration.TreatNoTestsAsError=true
        testRunTitle: Unit Tests
