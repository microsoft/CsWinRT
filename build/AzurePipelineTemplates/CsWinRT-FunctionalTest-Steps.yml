parameters: 
  - name: "BuildConfiguration"
    type: string
  - name: "BuildPlatform"
    type: string
  - name: "FunctionalTests"
    type: object
    default: 
    - JsonValueFunctionCalls
    - ClassActivation
    - Structs
    - Events
    - DynamicInterfaceCasting
    - Collections
    - Async
    - DerivedClassActivation
    - DerivedClassAsBaseClass
    - CCW

steps:
  - ${{ each functionalTest in parameters.FunctionalTests }}:

    # Do restore separately to workaround issue where specifying TargetFramework causes nuget restore to propagate it to project references causing issues
    - task: MSBuild@1
      displayName: Restore ${{ functionalTest }}
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), and(eq(variables['BuildConfiguration'], 'release'), eq(variables['BuildPlatform'], 'x64'))))
      inputs:
        solution: $(Build.SourcesDirectory)\src\Tests\FunctionalTests\${{ functionalTest }}\${{ functionalTest }}.csproj
        msbuildArguments: /t:restore /p:CIBuildReason=CI,RuntimeIdentifier=win-$(BuildPlatform),solutiondir=$(Build.SourcesDirectory)\src\,VersionNumber=$(VersionNumber),VersionString=$(Build.BuildNumber),AssemblyVersionNumber=$(WinRT.Runtime.AssemblyVersion),GenerateTestProjection=true,AllowedReferenceRelatedFileExtensions=".xml;.pri;.dll.config;.exe.config"
        platform: $(BuildPlatform)
        configuration: $(BuildConfiguration)
  
    - task: MSBuild@1
      displayName: Publish ${{ functionalTest }} trimmed (net10.0)
      condition: and(succeeded(), eq(variables['BuildPlatform'], 'x86'))
      inputs:
        solution: $(Build.SourcesDirectory)\src\Tests\FunctionalTests\${{ functionalTest }}\${{ functionalTest }}.csproj
        msbuildArguments: /t:publish /p:CIBuildReason=CI,RuntimeIdentifier=win-$(BuildPlatform),TargetFramework=net10.0,solutiondir=$(Build.SourcesDirectory)\src\,VersionNumber=$(VersionNumber),VersionString=$(Build.BuildNumber),AssemblyVersionNumber=$(WinRT.Runtime.AssemblyVersion),GenerateTestProjection=true,AllowedReferenceRelatedFileExtensions=".xml;.pri;.dll.config;.exe.config"
        platform: $(BuildPlatform)
        configuration: $(BuildConfiguration)

    - task: CmdLine@2
      displayName: Run ${{ functionalTest }} trimmed (net10.0)
      condition: and(succeeded(), eq(variables['BuildPlatform'], 'x86'))
      continueOnError: True
      inputs:
        workingDirectory: $(Build.SourcesDirectory)\src\Tests\FunctionalTests\${{ functionalTest }}\bin\$(BuildConfiguration)\net10.0\win-$(BuildPlatform)\publish
        script: |
          dir
          echo Running ${{ functionalTest }}.exe 
          ${{ functionalTest }}.exe 
          if %Errorlevel% NEQ 100 (
            exit /b !ErrorLevel!
          )
          exit /b 0 

    - task: CopyFiles@2
      displayName: Copy ${{ functionalTest }} trimmed (net10.0)
      condition: and(eq(variables['_PublishFunctionalTests'], 'true'), eq(variables['BuildPlatform'], 'x86'))
      inputs:
        SourceFolder: $(Build.SourcesDirectory)\src\Tests\FunctionalTests\${{ functionalTest }}\bin\$(BuildConfiguration)\net10.0\win-$(BuildPlatform)\publish
        TargetFolder: $(StagingFolder)\FunctionalTests\${{ functionalTest }}\

    - task: MSBuild@1
      displayName: Publish ${{ functionalTest }} for AOT (net10.0)
      condition: and(succeeded(), and(eq(variables['BuildConfiguration'], 'release'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        solution: $(Build.SourcesDirectory)\src\Tests\FunctionalTests\${{ functionalTest }}\${{ functionalTest }}.csproj
        msbuildArguments: /t:publish /p:CIBuildReason=CI,RuntimeIdentifier=win-$(BuildPlatform),TargetFramework=net10.0,solutiondir=$(Build.SourcesDirectory)\src\,VersionNumber=$(VersionNumber),VersionString=$(Build.BuildNumber),AssemblyVersionNumber=$(WinRT.Runtime.AssemblyVersion),GenerateTestProjection=true,AllowedReferenceRelatedFileExtensions=".xml;.pri;.dll.config;.exe.config"
        platform: $(BuildPlatform)
        configuration: $(BuildConfiguration)

    - task: CmdLine@2
      displayName: Run ${{ functionalTest }} for AOT (net10.0)
      condition: and(succeeded(), and(eq(variables['BuildConfiguration'], 'release'), eq(variables['BuildPlatform'], 'x64')))
      continueOnError: True
      inputs:
        workingDirectory: $(Build.SourcesDirectory)\src\Tests\FunctionalTests\${{ functionalTest }}\bin\$(BuildConfiguration)\net10.0\win-$(BuildPlatform)\publish
        script: |
          dir
          echo Running ${{ functionalTest }}.exe 
          ${{ functionalTest }}.exe 
          if %Errorlevel% NEQ 100 (
            exit /b !ErrorLevel!
          )
          exit /b 0 

    - task: CopyFiles@2
      displayName: Copy ${{ functionalTest }} for AOT (net10.0)
      condition: and(eq(variables['_PublishFunctionalTests'], 'true'), and(eq(variables['BuildConfiguration'], 'release'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        SourceFolder: $(Build.SourcesDirectory)\src\Tests\FunctionalTests\${{ functionalTest }}\bin\$(BuildConfiguration)\net10.0\win-$(BuildPlatform)\publish
        TargetFolder: $(StagingFolder)\FunctionalTests\${{ functionalTest }}\
