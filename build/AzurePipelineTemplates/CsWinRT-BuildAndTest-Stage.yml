stages:
- stage: BuildAndTest
  displayName: Build/Test Stage
  jobs: 
  - job: BuildAndTest
    pool:
      vmImage: windows-2019
    timeoutInMinutes: 90
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml#multi-job-configuration
    strategy:
      maxParallel: 10
      matrix:
        x64_Debug:
          BuildPlatform: 'x64'
          BuildConfiguration: 'debug'
        x86_Debug:
          BuildPlatform: 'x86'
          BuildConfiguration: 'debug'
        arm64_Debug:
          BuildPlatform: 'arm64'
          BuildConfiguration: 'debug'
        x64_Release:
          BuildPlatform: 'x64'
          BuildConfiguration: 'release'
        x86_Release:
          BuildPlatform: 'x86'
          BuildConfiguration: 'release'
        arm64_Release:
          BuildPlatform: 'arm64'
          BuildConfiguration: 'release' 
    steps:
    - checkout: self
      clean: true
      persistCredentials: true
    
# Build Steps 
    - template: CsWinRT-Build-Steps.yml

# Run Unit Tests
    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        command: test
        projects: 'src/Tests/UnitTest/UnitTest.csproj'
        arguments: --diag $(Build.ArtifactStagingDirectory)\unittest\test.log --no-build --logger xunit;LogFilePath=UNITTEST-$(Build.BuildNumber).xml /nologo /m /p:platform=$(BuildPlatform);configuration=$(BuildConfiguration)
        testRunTitle: Unit Tests

# Run Embedded Unit Tests
    - task: DotNetCoreCLI@2
      displayName: Run Embedded Unit Tests
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        command: test
        projects: 'src/Samples/TestEmbedded/UnitTestEmbedded/UnitTestEmbedded.csproj'
        arguments: --diag $(Build.ArtifactStagingDirectory)\unittestembedded\test.log --no-build --logger xunit;LogFilePath=EMBEDDEDUNITTEST-$(Build.BuildNumber).xml /nologo /m /p:platform=$(BuildPlatform);configuration=$(BuildConfiguration)
        testRunTitle: Embedded Unit Tests

# Run Object Lifetime Tests
    - task: VSTest@2
      displayName: Run Object Lifetime Tests
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        testAssemblyVer2: Tests\ObjectLifetimeTests\bin\$(BuildPlatform)\$(BuildConfiguration)\net5.0-windows10.0.19041.0\win10-$(BuildPlatform)\ObjectLifetimeTests.Lifted.build.appxrecipe
        searchFolder: $(Build.SourcesDirectory)\src

# Publish Test Log
    - task: PublishBuildArtifacts@1
      displayName: Publish Test Log
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)\unittest
        ArtifactName: $(BuildConfiguration)_$(BuildPlatform)_UnitTest

# Publish Embedded Test Log
    - task: PublishBuildArtifacts@1
      displayName: Publish Embedded Test Log
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)\unittestembedded
        ArtifactName: $(BuildConfiguration)_$(BuildPlatform)_UnitTestEmbedded

# Run Host Tests
    - task: CmdLine@2
      displayName: Run Host Tests
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      continueOnError: True
      inputs:
        workingDirectory: $(Build.SourcesDirectory)\src
        script: |
          dir _build\$(BuildPlatform)\$(BuildConfiguration)\HostTest\bin
          _build\$(BuildPlatform)\$(BuildConfiguration)\HostTest\bin\HostTest.exe --gtest_output=xml:HOSTTEST-$(Build.BuildNumber).xml 
          exit /b 0

# Run Source Generator Tests  
    - task: CmdLine@2
      displayName: Run Source Generator Tests
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      continueOnError: True
      inputs:
        workingDirectory: $(Build.SourcesDirectory)\src
        script: |
          dir _build\$(BuildPlatform)\$(BuildConfiguration)\AuthoringConsumptionTest\bin
          _build\$(BuildPlatform)\$(BuildConfiguration)\AuthoringConsumptionTest\bin\AuthoringConsumptionTest.exe --gtest_output=xml:AUTHORINGTEST-$(Build.BuildNumber).xml 
          exit /b 0 

  - job: Benchmarks
    displayName: Run Benchmarks
    condition: or(eq(variables['_RunBenchmarks'],'true'), eq(variables['Build.Reason'],'Schedule'))
    dependsOn: []
    pool:
      vmImage: windows-2019
    timeoutInMinutes: 120
    steps:
    - template: CsWinRT-Benchmarks-Steps.yml