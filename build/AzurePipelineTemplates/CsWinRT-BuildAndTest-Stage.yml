parameters: 
  - name: OfficialBuild
    type: boolean
    default: false

jobs: 
  - job:
    displayName: Build/Test Stage
    pool:
      type: windows
      
    timeoutInMinutes: 270
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml#multi-job-configuration

    strategy:
      maxParallel: 10
      matrix:
        x64_Debug:
          BuildPlatform: 'x64'
          BuildConfiguration: 'debug'
        x86_Debug:
          BuildPlatform: 'x86'
          BuildConfiguration: 'debug'
        arm64_Debug:
          BuildPlatform: 'arm64'
          BuildConfiguration: 'debug'
        x64_Release:
          BuildPlatform: 'x64'
          BuildConfiguration: 'release'
        x86_Release:
          BuildPlatform: 'x86'
          BuildConfiguration: 'release'
        arm64_Release:
          BuildPlatform: 'arm64'
          BuildConfiguration: 'release' 
          
    variables:
      ob_outputDirectory: '$(Build.SourcesDirectory)\out'
      ob_artifactSuffix: $(BuildConfiguration)_$(BuildPlatform)
      StagingFolder: $(ob_outputDirectory)
      ob_sdl_prefast_enabled: true
      ob_sdl_prefast_runDuring: 'Build'
      ob_sdl_checkCompliantCompilerWarnings: true

    steps:
   
# Build Steps 
    - template: CsWinRT-Build-Steps.yml@self
      parameters:
        BuildConfiguration: $(BuildConfiguration)
        BuildPlatform: $(BuildPlatform) 

# Enable GC stress
    - task: PowerShell@2
      displayName: Enable GC Stress
      condition: and(succeeded(), eq(variables['_RunGCStress'], 'true'))
      inputs:
        targetType: inline
        script: |
          Write-Host "##vso[task.setvariable variable=DOTNET_GCStress;]0xC"

# Run Unit Tests
    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        command: test
        projects: 'src/Tests/UnitTest/UnitTest.csproj'
        arguments: --diag $(Build.ArtifactStagingDirectory)\unittest\test.log --no-build --logger xunit;LogFilePath=UNITTEST-$(Build.BuildNumber).xml /nologo /m /p:platform=$(BuildPlatform);configuration=$(BuildConfiguration);CIBuildReason=CI -- RunConfiguration.TreatNoTestsAsError=true
        testRunTitle: Unit Tests

# Run Embedded Unit Tests
    - task: DotNetCoreCLI@2
      displayName: Run Embedded Unit Tests
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        command: test
        projects: 'src/Samples/TestEmbedded/UnitTestEmbedded/UnitTestEmbedded.csproj'
        arguments: --diag $(Build.ArtifactStagingDirectory)\unittestembedded\test.log --no-build --logger xunit;LogFilePath=EMBEDDEDUNITTEST-$(Build.BuildNumber).xml /nologo /m /p:platform=$(BuildPlatform);configuration=$(BuildConfiguration) -- RunConfiguration.TreatNoTestsAsError=true
        testRunTitle: Embedded Unit Tests

#Enable developer mode to run object lifetime tests
    - task: PowerShell@2
      displayName: Enable Developer Mode
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        targetType: inline
        script: |
          reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /t REG_DWORD /f /v "AllowDevelopmentWithoutDevLicense" /d "1"

# Run Object Lifetime Tests
    - task: VSTest@3
      displayName: Run Object Lifetime Tests
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        testAssemblyVer2: Tests\ObjectLifetimeTests\bin\$(BuildPlatform)\$(BuildConfiguration)\net6.0-windows10.0.19041.0\win10-$(BuildPlatform)\ObjectLifetimeTests.Lifted.build.appxrecipe
        searchFolder: $(Build.SourcesDirectory)\src
        diagnosticsEnabled : true

# Run Host Tests
    - task: CmdLine@2
      displayName: Run Host Tests
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      continueOnError: True
      inputs:
        workingDirectory: $(Build.SourcesDirectory)\src
        script: |
          dir _build\$(BuildPlatform)\$(BuildConfiguration)\HostTest\bin
          _build\$(BuildPlatform)\$(BuildConfiguration)\HostTest\bin\HostTest.exe --gtest_output=xml:HOSTTEST-$(Build.BuildNumber).xml 
          exit /b 0

# Run Source Generator Tests  
    - task: CmdLine@2
      displayName: Run Source Generator Tests
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      continueOnError: True
      inputs:
        workingDirectory: $(Build.SourcesDirectory)\src
        script: |
          dir _build\$(BuildPlatform)\$(BuildConfiguration)\AuthoringConsumptionTest\bin
          _build\$(BuildPlatform)\$(BuildConfiguration)\AuthoringConsumptionTest\bin\AuthoringConsumptionTest.exe --gtest_output=xml:AUTHORINGTEST-$(Build.BuildNumber).xml 
          exit /b 0

# Run WUX Tests
    - task: CmdLine@2
      displayName: Run WUX Tests
      condition: and(succeeded(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      continueOnError: True
      inputs:
        workingDirectory: $(Build.SourcesDirectory)\src
        script: |
          dir _build\$(BuildPlatform)\$(BuildConfiguration)\AuthoringWuxConsumptionTest\bin
          _build\$(BuildPlatform)\$(BuildConfiguration)\AuthoringWuxConsumptionTest\bin\AuthoringWuxConsumptionTest.exe --gtest_output=xml:AUTHORINGWUXTEST-$(Build.BuildNumber).xml 
          exit /b 0 

# Run Functional Tests
    - template: CsWinRT-FunctionalTest-Steps.yml@self
      parameters:
        BuildConfiguration: $(BuildConfiguration)
        BuildPlatform: $(BuildPlatform) 

# Disable GC stress
    - task: PowerShell@2
      displayName: Disable GC Stress
      condition: and(succeeded(), eq(variables['_RunGCStress'], 'true'))
      inputs:
        targetType: inline
        script: |
          Write-Host "##vso[task.setvariable variable=DOTNET_GCStress;]0x0"

    - task: CopyFiles@2
      displayName: Publish Test Log
      condition: and(failed(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        SourceFolder: $(Build.ArtifactStagingDirectory)\unittest
        Contents: |
          test.log
        TargetFolder: $(StagingFolder)\UnitTest

    - task: CopyFiles@2
      displayName: Publish Embedded Test Log
      condition: and(failed(), or(eq(variables['BuildPlatform'], 'x86'), eq(variables['BuildPlatform'], 'x64')))
      inputs:
        SourceFolder: $(Build.ArtifactStagingDirectory)\unittestembedded
        Contents: |
          test.log
        TargetFolder: $(StagingFolder)\UnitTestEmbedded

  - job: Benchmarks
    displayName: Run Benchmarks
    condition: or(eq(variables['_RunBenchmarks'],'true'), eq(variables['Build.Reason'],'Schedule'))
    dependsOn: []
    pool:
      type: windows
    timeoutInMinutes: 120    
    variables:
      ob_outputDirectory: '$(Build.SourcesDirectory)\out'
      StagingFolder: $(ob_outputDirectory)
    steps:
    - template: CsWinRT-Benchmarks-Steps.yml@self