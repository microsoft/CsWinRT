steps:
- checkout: self
  clean: true
  persistCredentials: true
    
# Clone TestWinRT
- task: CmdLine@2
  displayName: Clone TestWinRT
  inputs: 
    script: get_testwinrt.cmd
    workingDirectory: $(Build.SourcesDirectory)\src

# Use .NET Core SDK 2.1
- task: UseDotNet@2
  displayName: Use .NET Core SDK 2.1
  inputs:
    version: 2.1.x
    installationPath: C:\Users\VssAdministrator\AppData\Local\Microsoft\dotnet\
    performMultiLevelLookup: true

# Install .NET 5 SDK
- task: PowerShell@2 
  displayName: Install .NET 5 SDK
  inputs:
    targetType: inline
    failOnStderr: true
    script: |
      Write-Host ##vso[task.setvariable variable=PATH;]${env:LocalAppData}\Microsoft\dotnet;${env:PATH};
        
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;
                
      &([scriptblock]::Create((Invoke-WebRequest -UseBasicParsing 'https://dot.net/v1/dotnet-install.ps1'))) -Version "$($env:NET5_SDK_VERSION)" -Architecture "x64" -AzureFeed "$($env:NET5_SDK_FEED)"

# Install .NET 6 SDK 
- task: PowerShell@2
  displayName: Install .NET 6 SDK
  inputs:
    targetType: inline
    failOnStderr: true
    script: |
      Write-Host ##vso[task.setvariable variable=PATH;]${env:LocalAppData}\Microsoft\dotnet;${env:PATH}; 
        
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; 
         
      dotnet new globaljson --sdk-version "$($env:NET6_SDK_VERSION)" 
         
      &([scriptblock]::Create((Invoke-WebRequest -UseBasicParsing 'https://dot.net/v1/dotnet-install.ps1'))) -Version "$($env:NET6_SDK_VERSION)" -Architecture "x64" -AzureFeed "$($env:NET5_SDK_FEED)"

# Verify .NET SDK
- task: CmdLine@2
  displayName: Verify .NET SDK
  inputs:
    workingDirectory: $(Build.SourcesDirectory)
    script: |
      where dotnet
      dotnet --info

# Run Benchmarks
- task: CmdLine@2
  displayName: Run Benchmarks for x64 Release
  inputs:
    workingDirectory: $(Build.SourcesDirectory)\src
    script: |
      if "%VSCMD_VER%"=="" (
        pushd c:
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" >nul 2>&1
        popd
      )

      benchmark.cmd

# Component Detection
- task: ComponentGovernanceComponentDetection@0
  displayName: Component Detection

# Stage Benchmark Results
- task: CopyFiles@2
  displayName: Stage Benchmark Results
  condition: always()
  inputs:
    SourceFolder: $(Build.SourcesDirectory)\src\BenchmarkDotNet.Artifacts\results\
    Contents: '*'
    TargetFolder: $(Build.ArtifactStagingDirectory)\benchmarks

# Publish Results
- task: PublishBuildArtifacts@1
  displayName: Publish Results
  condition: always()
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)\benchmarks
    ArtifactName: benchmarks
