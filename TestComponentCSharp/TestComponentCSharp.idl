// Modern IDL 3.0: https://docs.microsoft.com/en-us/uwp/midl-3/intro

// TestComponentCSharp exercises cases specific to the C# language projection
// TestWinRT.TestComponent exercises cases general to all WinRT language projections

namespace TestComponentCSharp
{
    // Event handlers
    delegate void EventHandler0();
    delegate void EventHandler1(Class sender);
    delegate void EventHandler2(Class sender, Int32 arg0);
    delegate void EventHandler3(Class sender, Int32 arg0, String arg1);
    delegate void EventHandlerCollection(Class sender, Windows.Foundation.Collections.IVector<Int32> arg0, Windows.Foundation.Collections.IMap<Int32, String> arg1);

    struct BlittableStruct
    {
        Int32 i32;
    };

    struct ComposedBlittableStruct
    {
        BlittableStruct blittable;
    };

    struct NonBlittableStringStruct
    {
        String str;
    };

    struct NonBlittableBoolStruct
    {
        // Default C# behavior is to marshal as 32-bits, hence multiple values
        Boolean w;
        Boolean x;
        Boolean y;
        Boolean z;
    };

    struct NonBlittableRefStruct
    {
        Windows.Foundation.IReference<Int32> ref32;
    };

    struct ComposedNonBlittableStruct
    {
        BlittableStruct blittable;
        NonBlittableStringStruct strings;
        NonBlittableBoolStruct bools;
        NonBlittableRefStruct refs;
    };

    delegate Int32 ProvideInt();
    delegate Boolean ProvideBool();
    delegate String ProvideString();
    delegate Object ProvideObject();
    delegate Windows.Foundation.Collections.IIterable<Object> ProvideObjectIterable();
    delegate Windows.Foundation.Uri ProvideUri();
    delegate Windows.Foundation.Collections.IKeyValuePair<String, String> ProvideStringPair();
    delegate Microsoft.UI.Xaml.Interop.IBindableIterable ProvideBindableIterable();
    delegate Microsoft.UI.Xaml.Interop.IBindableVector ProvideBindableVector();

    interface ICowboy
    {
        void Draw();
        void Draw(String gunModel);
        String DrawTo();
    }

    interface IArtist
    {
        void Draw();
        void Draw(Int32 figureSides);
        Int32 DrawTo();
    }

    interface IProperties1
    {
        Int32 ReadWriteProperty{ get; };
        //Int32 DisjointProperty{ get; };
        //Int32 DistinctProperty{ get; };
    }

    interface IProperties2 requires IProperties1
    {
        Int32 ReadWriteProperty{ set; };
        //String DisjointProperty{ set; };
        //String DistinctProperty{ get; set; };
    }

    static runtimeclass ComImports
    {
        static Object MakeObject();
        static Int32 NumObjects{ get; };
    }

    [default_interface]
    runtimeclass Class :
        Windows.Foundation.IStringable
        //, ICowboy
        //, IArtist
        , IProperties1
        , IProperties2
        //, Windows.Foundation.Collections.IVector<String>
        //, Windows.Foundation.Collections.IMap<Int32, String>
    {
        // factory
        Class();
        Class(Int32 intProperty);
        Class(Int32 intProperty, String stringProperty);

        // static
        static Int32 StaticIntProperty;
        static event Windows.Foundation.EventHandler<Int32> StaticIntPropertyChanged;
        static String StaticStringProperty;
        static event Windows.Foundation.TypedEventHandler<Class, String> StaticStringPropertyChanged;
        static void StaticGetString();
        static void StaticSetString(ProvideString provideString);
        static Int32 StaticReadWriteProperty{ get; };
        static Int32 StaticReadWriteProperty{ set; };
        static Windows.Foundation.TimeSpan FromSeconds(Int32 seconds);
        static Windows.Foundation.DateTime Now();

        // class
        event EventHandler0 Event0;
        void InvokeEvent0();
        event EventHandler1 Event1;
        void InvokeEvent1(Class sender);
        event EventHandler2 Event2;
        void InvokeEvent2(Class sender, Int32 arg0);
        event EventHandler3 Event3;
        void InvokeEvent3(Class sender, Int32 arg0, String arg1);
        event EventHandlerCollection CollectionEvent;
        void InvokeCollectionEvent(Class sender, Windows.Foundation.Collections.IVector<Int32> arg0, Windows.Foundation.Collections.IMap<Int32, String> arg1);
        event Windows.Foundation.EventHandler<Windows.Foundation.Collections.IVector<Int32> > NestedEvent;
        void InvokeNestedEvent(Class sender, Windows.Foundation.Collections.IVector<Int32> arg0);
        event Windows.Foundation.TypedEventHandler<Class, Windows.Foundation.Collections.IVector<String> > NestedTypedEvent;
        void InvokeNestedTypedEvent(Class sender, Windows.Foundation.Collections.IVector<String> arg0);

        Int32 IntProperty;
        event Windows.Foundation.EventHandler<Int32> IntPropertyChanged;
        void RaiseIntChanged();
        void CallForInt(ProvideInt provideInt);

        Boolean BoolProperty;
        event Windows.Foundation.EventHandler<Boolean> BoolPropertyChanged;
        void RaiseBoolChanged();
        void CallForBool(ProvideBool provideBool);

        String StringProperty;
        event Windows.Foundation.TypedEventHandler<Class, String> StringPropertyChanged;
        void RaiseStringChanged();
        void CallForString(ProvideString provideString);

        String StringProperty2;
        Windows.Foundation.Collections.IVector<String> StringsProperty;

        Object ObjectProperty;
        void RaiseObjectChanged();
        void CallForObject(ProvideObject provideObject);
        event Windows.Foundation.EventHandler<Object> ObjectPropertyChanged;

        Windows.Foundation.Collections.IIterable<Object> ObjectIterableProperty;
        void RaiseObjectIterableChanged();
        void CallForObjectIterable(ProvideObjectIterable provideObjectIterable);
        event Windows.Foundation.EventHandler<Windows.Foundation.Collections.IIterable<Object> > ObjectIterablePropertyChanged;

        Windows.Foundation.Uri UriProperty;
        void RaiseUriChanged();
        void CallForUri(ProvideUri provideUri);
        event Windows.Foundation.EventHandler<Windows.Foundation.Uri > UriPropertyChanged;

        Windows.Foundation.Collections.IKeyValuePair<String, String> StringPairProperty;
        void RaiseStringPairChanged();
        void CallForStringPair(ProvideStringPair provideStringPair);
        event Windows.Foundation.EventHandler<Windows.Foundation.Collections.IKeyValuePair<String, String> > StringPairPropertyChanged;

        // Structs
        BlittableStruct BlittableStructProperty;
        BlittableStruct GetBlittableStruct();
        void OutBlittableStruct(out BlittableStruct value);
        void SetBlittableStruct(BlittableStruct value);

        ComposedBlittableStruct ComposedBlittableStructProperty;
        ComposedBlittableStruct GetComposedBlittableStruct();
        void OutComposedBlittableStruct(out ComposedBlittableStruct value);
        void SetComposedBlittableStruct(ComposedBlittableStruct value);

        NonBlittableStringStruct NonBlittableStringStructProperty;
        NonBlittableStringStruct GetNonBlittableStringStruct();
        void OutNonBlittableStringStruct(out NonBlittableStringStruct value);
        void SetNonBlittableStringStruct(NonBlittableStringStruct value);

        NonBlittableBoolStruct NonBlittableBoolStructProperty;
        NonBlittableBoolStruct GetNonBlittableBoolStruct();
        void OutNonBlittableBoolStruct(out NonBlittableBoolStruct value);
        void SetNonBlittableBoolStruct(NonBlittableBoolStruct value);

        NonBlittableRefStruct NonBlittableRefStructProperty;
        NonBlittableRefStruct GetNonBlittableRefStruct();
        void OutNonBlittableRefStruct(out NonBlittableRefStruct value);
        void SetNonBlittableRefStruct(NonBlittableRefStruct value);

        ComposedNonBlittableStruct ComposedNonBlittableStructProperty;
        ComposedNonBlittableStruct GetComposedNonBlittableStruct();
        void OutComposedNonBlittableStruct(out ComposedNonBlittableStruct value);
        void SetComposedNonBlittableStruct(ComposedNonBlittableStruct value);

        // Arrays
        void SetInts(Int32[] ints);
        Int32[] GetInts();
        void FillInts(ref Int32[] ints);

        // Generics
        Windows.Foundation.IAsyncOperation<Int32> GetIntAsync();
        Windows.Foundation.IAsyncOperationWithProgress<String, Int32> GetStringAsync();
        Windows.Foundation.Collections.IVectorView<Int32> GetIntVector();
        Windows.Foundation.Collections.IVectorView<Boolean> GetBoolVector();
        Windows.Foundation.Collections.IVectorView<String> GetStringVector();
        Windows.Foundation.Collections.IVectorView<ComposedBlittableStruct> GetBlittableStructVector();
        Windows.Foundation.Collections.IVectorView<ComposedNonBlittableStruct> GetNonBlittableStructVector();
        Windows.Foundation.Collections.IVectorView<Object> GetObjectVector();
        Windows.Foundation.Collections.IVectorView<IProperties1> GetInterfaceVector();
        Windows.Foundation.Collections.IVectorView<Class> GetClassVector();

        Windows.Foundation.Collections.IIterable<Int32> GetIntIterable();
        void SetIntIterable(Windows.Foundation.Collections.IIterable<Int32> value);

        // Bindable
        Microsoft.UI.Xaml.Interop.IBindableIterable BindableIterableProperty;
        void RaiseBindableIterableChanged();
        void CallForBindableIterable(ProvideBindableIterable provideBindableIterable);
        event Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Interop.IBindableIterable> BindableIterablePropertyChanged;
        
        Microsoft.UI.Xaml.Interop.IBindableVector BindableVectorProperty;
        void RaiseBindableVectorChanged();
        void CallForBindableVector(ProvideBindableVector provideBindableVector);
        event Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Interop.IBindableVector> BindableVectorPropertyChanged;
        
        Microsoft.UI.Xaml.Interop.IBindableObservableVector BindableObservableVectorProperty;

        void CopyProperties(IProperties1 src);
        void CopyPropertiesViaWeakReference(IProperties1 src);

        // Async
        void CompleteAsync(); // Completes the in-flight async operation successfully
        void CompleteAsync(Int32 hr); // Completes the in-flight async operation with a failed HRESULT
        void AdvanceAsync(Int32 delta); // "Advances" the progress of an in-flight IAsync*WithProgress by an amount
        Windows.Foundation.IAsyncAction DoitAsync();
        Windows.Foundation.IAsyncActionWithProgress<Int32> DoitAsyncWithProgress();
        Windows.Foundation.IAsyncOperation<Int32> AddAsync(Int32 lhs, Int32 rhs);
        Windows.Foundation.IAsyncOperationWithProgress<Int32, Int32> AddAsyncWithProgress(Int32 lhs, Int32 rhs);

        // Type mappings
        // "Simple" structs (blittable with changes to add properties/functions/constructors/etc.)
        Windows.Foundation.Point PointProperty;
        Windows.Foundation.IReference<Windows.Foundation.Point> GetPointReference();
        Windows.Foundation.Rect RectProperty;
        Windows.Foundation.Size SizeProperty;
        Windows.UI.Color ColorProperty;
        Microsoft.UI.Xaml.CornerRadius CornerRadiusProperty;
        Microsoft.UI.Xaml.Duration DurationProperty;
        Microsoft.UI.Xaml.GridLength GridLengthProperty;
        Microsoft.UI.Xaml.Thickness ThicknessProperty;
        Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition GeneratorPositionProperty;
        Microsoft.UI.Xaml.Media.Matrix MatrixProperty;
        Microsoft.UI.Xaml.Media.Animation.KeyTime KeyTimeProperty;
        Microsoft.UI.Xaml.Media.Animation.RepeatBehavior RepeatBehaviorProperty;
        Microsoft.UI.Xaml.Media.Media3D.Matrix3D Matrix3DProperty;
        Windows.Foundation.Numerics.Matrix3x2 Matrix3x2Property;
        Windows.Foundation.Numerics.Matrix4x4 Matrix4x4Property;
        Windows.Foundation.Numerics.Plane PlaneProperty;
        Windows.Foundation.Numerics.Quaternion QuaternionProperty;
        Windows.Foundation.Numerics.Vector2 Vector2Property;
        Windows.Foundation.Numerics.Vector3 Vector3Property;
        Windows.Foundation.Numerics.Vector4 Vector4Property;

        // Structs mapped to equivalent ones in the System namespace
        Windows.Foundation.TimeSpan TimeSpanProperty;
        Windows.Foundation.IReference<Windows.Foundation.TimeSpan> GetTimeSpanReference();
        Windows.Foundation.DateTime DateTimeProperty;
        Windows.Foundation.IReference<Windows.Foundation.DateTime> GetDateTimeProperty();
        // HResult->Exception type mapping
        Windows.Foundation.HResult HResultProperty;

        // Boxing
        static Int32 UnboxInt32(Object obj);
        static Boolean UnboxBoolean(Object obj);
        static String UnboxString(Object obj);
        static Int32[] UnboxInt32Array(Object obj);
        static Boolean[] UnboxBooleanArray(Object obj);
        static String[] UnboxStringArray(Object obj);

        // WUX.Interop.TypeName -> System.Type mapping
        static Windows.UI.Xaml.Interop.TypeName Int32Type { get; };
        static Windows.UI.Xaml.Interop.TypeName ThisClassType { get; };
        static Windows.UI.Xaml.Interop.TypeName ReferenceInt32Type { get; };

        static Boolean VerifyTypeIsInt32Type(Windows.UI.Xaml.Interop.TypeName type);
        static Boolean VerifyTypeIsThisClassType(Windows.UI.Xaml.Interop.TypeName type);
        static Boolean VerifyTypeIsReferenceInt32Type(Windows.UI.Xaml.Interop.TypeName type);

        static String GetTypeNameForType(Windows.UI.Xaml.Interop.TypeName type);

        // Other
        static Object EmptyString { get; };

        // Keyword escapes
        String Catch(String params, out String lock);

        // Interface projections
        static IProperties1 NativeProperties1 { get; };
    }

    [threading(sta), marshaling_behavior(standard)]
    runtimeclass NonAgileClass
    {
        NonAgileClass();
        void Observe(Microsoft.UI.Xaml.Interop.IBindableObservableVector vector);
    }

    // IInspectable-based interop interface
    [uuid(39E050C3-4E74-441A-8DC0-B81104DF949C)]
    interface IUserConsentVerifierInterop
    {
        Windows.Foundation.IAsyncOperation<Windows.Security.Credentials.UI.UserConsentVerificationResult> RequestVerificationForWindowAsync(UInt64 appWindow, String message, GUID riid);
    }
}
