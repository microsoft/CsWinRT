<!--
***********************************************************************************************
Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    
  <ItemGroup> 
    <CsWinRTAuthoringDependencyDlls Condition="Exists('$(CsWinRTPath)lib\net5.0\WinRT.Host.Shim.dll')" Include="$(CsWinRTPath)lib\net5.0\WinRT.Host.Shim.dll" />
    <CsWinRTAuthoringDependencyDlls Condition="Exists('$(CsWinRTPath)lib\net5.0\WinRT.Runtime.dll')" Include="$(CsWinRTPath)lib\net5.0\WinRT.Runtime.dll" />
    <CsWinRTAuthoringDependencyDlls Condition="Exists('$(TargetDir)Microsoft.Windows.SDK.NET.dll')" Include="$(TargetDir)Microsoft.Windows.SDK.NET.dll" />
    <CsWinRTAuthoringDependencyDlls Condition="Exists('$(CsWinRTPath)runtimes\win-$(Platform)\native\WinRT.Host.dll')" 
                                    Include="$(CsWinRTPath)runtimes\win-$(Platform)\native\WinRT.Host.dll" />
    <None Include="@(CsWinRTAuthoringDependencyDlls)">
      <Link>%(RecursiveDir)%(FileName)%(Extension)</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
   </ItemGroup>

  <!-- When an authored component makes a nupkg, add the necessary hosting assets to the package -->
  <Target Name="CsWinRTIncludeHostDlls"  Condition="'$(CsWinRTComponent)' == 'true'" BeforeTargets="AfterBuild" Outputs="@(Content)">
    <!-- When packing, include all necessary DLLs and the targets file for DLL copying on the native side -->
    <ItemGroup>
      <!-- The host was added for project references, but needs to be removed because it belongs in its own location in the nupkg -->
      <CsWinRTAuthoringDependencyDlls Remove="@(CsWinRTCsWinRTAuthoringDependencyDlls)" Condition="'%(FileName)%(Extension)' == 'WinRT.Host.dll'" />

      <!-- Add the managed DLLs and generated WinMD -->
      <Content Include="@(CsWinRTAuthoringDependencyDlls)" Pack="true" PackagePath="lib\$(TargetFramework)" />
      <Content Include="$(TargetDir)$(AssemblyName).winmd" Pack="true" PackagePath="lib\$(TargetFramework)\winmd" />

      <!-- Custom targets that copy dlls for consumers of the authored component. -->
      <Content Include="$(CsWinRTPath)buildTransitive\Microsoft.Windows.CsWinRT.Authoring.Transitive.targets" 
               Pack="true" 
               PackagePath="buildTransitive\$(AssemblyName).targets;build\$(AssemblyName).targets" />

      <!-- We must packaged every architecture version of WinRT.Host.dll -->
      <!-- x64 --> 
      <Content Condition="Exists('$(CsWinRTPath)runtimes\win-x64\native\WinRT.Host.dll')" 
               Include="$(CsWinRTPath)runtimes\win-x64\native\WinRT.Host.dll"
               Pack="true"
               PackagePath="runtimes\win-x64\native"/>
      <!-- x86 --> 
      <Content Condition="Exists('$(CsWinRTPath)runtimes\win-x86\native\WinRT.Host.dll')" 
               Include="$(CsWinRTPath)runtimes\win-x86\native\WinRT.Host.dll"
               Pack="true"
               PackagePath="runtimes\win-x86\native"/>
      <!-- arm --> 
      <Content Condition="Exists('$(CsWinRTPath)runtimes\win-arm\native\WinRT.Host.dll')" 
               Include="$(CsWinRTPath)runtimes\win-arm\native\WinRT.Host.dll"
               Pack="true"
               PackagePath="runtimes\win-arm\native"/>
      <!-- arm64 --> 
      <Content Condition="Exists('$(CsWinRTPath)runtimes\win-arm64\native\WinRT.Host.dll')" 
               Include="$(CsWinRTPath)runtimes\win-arm64\native\WinRT.Host.dll"
               Pack="true"
               PackagePath="runtimes\win-arm64\native"/>
   </ItemGroup>
  </Target>

</Project>
