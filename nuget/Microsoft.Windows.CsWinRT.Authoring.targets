<!--
***********************************************************************************************
Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <PropertyGroup>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <!-- Generate a RuntimeConfig -->
    <EnableDynamicLoading>true</EnableDynamicLoading>
    <!-- Name the RuntimeConfig properly -->
    <ProjectRuntimeConfigFileName>WinRT.Host.runtimeconfig.json</ProjectRuntimeConfigFileName>
    <!-- Make sure WinRT.Runtime.dll and Microsoft.Windows.SDK.NET.dll get binplaced with authored component's dll -->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <CsWinRTDetectDependentAuthoringWinMDs Condition="'$(CsWinRTDetectDependentAuthoringWinMDs)'==''">true</CsWinRTDetectDependentAuthoringWinMDs>
  </PropertyGroup>

  <ItemGroup>
    <CompilerVisibleProperty Include="AssemblyName" />
    <CompilerVisibleProperty Include="AssemblyVersion" />
    <CompilerVisibleProperty Include="CsWinRTComponent" />
    <CompilerVisibleProperty Include="CsWinRTEnableLogging" />
    <CompilerVisibleProperty Include="CsWinRTGeneratedFilesDir" />
    <CompilerVisibleProperty Include="CsWinRTExe" />
    <CompilerVisibleProperty Include="CsWinRTKeepGeneratedSources" />
    <CompilerVisibleProperty Include="CsWinRTWindowsMetadata" />
    <CompilerVisibleProperty Include="CsWinRTGenerateProjection" />
    <CompilerVisibleProperty Include="CsWinRTAuthoringInputs" />
  </ItemGroup>

  <!-- Note this runs before the msbuild editor config file is generated because that is what is used to pass properties to the source generator. -->
  <Target Name="CsWinRTSetAuthoringWinMDs" BeforeTargets="GenerateMSBuildEditorConfigFile;GenerateMSBuildEditorConfigFileCore" DependsOnTargets="CsWinRTRemoveWinMDReferences;GetAssemblyVersion;CsWinRTPrepareProjection" Condition="$(CsWinRTEnabled)">
    <!-- Try to find WinMDs for respective projection DLLs by looking for WinMDs in the packages they come from. -->
    <ItemGroup Condition="'$(CsWinRTDetectDependentAuthoringWinMDs)'=='true'">
      <_CsWinRTRuntimeCopyLocalItemsFromNuGetPackage Include="@(RuntimeCopyLocalItems->HasMetadata('NuGetPackageVersion'))" />
      <_CsWinRTDetectedPackages Include="%(_CsWinRTRuntimeCopyLocalItemsFromNuGetPackage.NuGetPackageId)\%(_CsWinRTRuntimeCopyLocalItemsFromNuGetPackage.NuGetPackageVersion)" Condition="@(_CsWinRTRuntimeCopyLocalItemsFromNuGetPackage->Count()) > 0" />
      <_CsWinRTDetectedDistinctPackages Include="@(_CsWinRTDetectedPackages->Distinct())" />
      <CsWinRTAuthoringDetectedWinMDs Include="$(NuGetPackageRoot)%(_CsWinRTDetectedDistinctPackages.Identity)\**\*.winmd" Condition="@(_CsWinRTDetectedDistinctPackages->Count()) > 0" />
    </ItemGroup>

    <ItemGroup>
      <CsWinRTAuthoringWinMDs Include="@(CsWinRTAuthoringDetectedWinMDs)" />
      <CsWinRTAuthoringWinMDs Include="@(CsWinRTInputs)" />
      <CsWinRTAuthoringDistinctWinMDs Include="@(CsWinRTAuthoringWinMDs->Distinct())" />
    </ItemGroup>
    <PropertyGroup>
      <CsWinRTAuthoringInputs>$(CsWinRTAuthoringInputs) @(CsWinRTAuthoringDistinctWinMDs->'"%(FullPath)"', ' ') </CsWinRTAuthoringInputs>
    </PropertyGroup>
  </Target>

  <!-- For Project Reference consumers, copy the necessary WinRT DLLs to output directory --> 
  <ItemGroup> 
    <CsWinRTAuthoringDependencyDlls Condition="Exists('$(CsWinRTPath)lib\net5.0\WinRT.Host.Shim.dll')" Include="$(CsWinRTPath)lib\net5.0\WinRT.Host.Shim.dll" />
    <CsWinRTAuthoringDependencyDlls Condition="Exists('$(CsWinRTPath)lib\net5.0\WinRT.Runtime.dll')" Include="$(CsWinRTPath)lib\net5.0\WinRT.Runtime.dll" />
    
    <None Condition="Exists('$(CsWinRTPath)lib\net5.0\WinRT.Host.Shim.dll')" Include="$(CsWinRTPath)lib\net5.0\WinRT.Host.Shim.dll">
      <TargetPath>WinRT.Host.Shim.dll</TargetPath>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

    <None Condition="Exists('$(CsWinRTPath)lib\net5.0\WinRT.Runtime.dll')" Include="$(CsWinRTPath)lib\net5.0\WinRT.Runtime.dll">
      <TargetPath>WinRT.Runtime.dll</TargetPath>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

    <None Condition="Exists('$(CsWinRTPath)runtimes\win-$(Platform)\native\WinRT.Host.dll')" 
          Include="$(CsWinRTPath)runtimes\win-$(Platform)\native\WinRT.Host.dll">
      <TargetPath>WinRT.Host.dll</TargetPath>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <!-- Add the RuntimeConfig to output of project reference consumers -->
  <Target Name="CsWinRTAuthoring_AddRuntimeDependenciesToContent" 
          AfterTargets="GenerateBuildRuntimeConfigurationFiles" 
          BeforeTargets="GetCopyToOutputDirectoryItems;_GetCopyToOutputDirectoryItemsFromThisProject">
    <ItemGroup>
      <AllItemsFullPathWithTargetPath Include="$(ProjectRuntimeConfigFilePath)">
        <TargetPath>$([System.IO.Path]::GetFileName($(ProjectRuntimeConfigFilePath)))</TargetPath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </AllItemsFullPathWithTargetPath>

      <AllPublishItemsFullPathWithTargetPath Include="$(ProjectRuntimeConfigFilePath)">
        <TargetPath>$([System.IO.Path]::GetFileName($(ProjectRuntimeConfigFilePath)))</TargetPath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </AllPublishItemsFullPathWithTargetPath>
    </ItemGroup>
  </Target>

  <!-- Update the project's output to include the generated WinMD.
 
       ResolveableAssembly metadata decides who we can support:
          if it is not present, we support C++, but not C# 
            => solution: sdk1130 error becomes a warning

          if it is present (as 'false'), we support C#, but not C++
            => solution: C++/WinRT targets need to use _ResolvedNativeProjectReferencePaths
  -->
  <Target Name="GetTargetPath" Returns="@(TargetPathWithTargetPlatformMoniker)">
    <ItemGroup>
      <TargetPathWithTargetPlatformMoniker Include="$(TargetDir)$(AssemblyName).winmd">
        <BuildReference>true</BuildReference>
        <WinMDFile>true</WinMDFile>
        <Implementation>WinRT.Host.dll</Implementation>
        <ResolveableAssembly>false</ResolveableAssembly>
        <FileType>winmd</FileType>
        <Primary>true</Primary>
      </TargetPathWithTargetPlatformMoniker>
    </ItemGroup>
  </Target>

  <!-- Prevent C++ apps from thinking there is a framework mismatch by setting our target framework to blank.
       Note, this does prevent C#/WinRT apps from cross-platform targeting, but a netcore3.1 app wouldn't use C#/WinRT anyway -->
  <Target Name="GetTargetFrameworks" Returns="@(_ThisProjectBuildMetadata)">
    <ItemGroup>
      <_ThisProjectBuildMetadata Include="$(MSBuildProjectFullPath)">
        <TargetFrameworks></TargetFrameworks>
        <TargetFrameworkMonikers></TargetFrameworkMonikers>
        <TargetPlatformMonikers></TargetPlatformMonikers>
        <HasSingleTargetFramework>true</HasSingleTargetFramework>
        <IsRidAgnostic>true</IsRidAgnostic>
      </_ThisProjectBuildMetadata>
    </ItemGroup>
  </Target>

  <Target Name="GenerateTransitiveTargets" AfterTargets="Build">
    <PropertyGroup>
      <ComponentTargetsFile>$(OutDir)\CsWinRTAuthoring\$(AssemblyName).targets</ComponentTargetsFile>
    </PropertyGroup>

    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%3C!-- This file was produced from C#/WinRT --%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%3CProject ToolsVersion=&quot;14.0&quot; xmln=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%3CPropertyGroup%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3C!-- Add the hosting dlls to references so they get binplaced --%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3CResolveReferencesDependsOn%3E$(AssemblyName)CopyAuthoringDlls%3B%24(ResolveReferencesDependsOn)%3C/ResolveReferencesDependsOn%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3C!-- Add authored component's winmd to references before C++/WinRT runs --%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3CBuildDependsOn%3E$(AssemblyName)AddAuthoredWinMDReference%3B%24(BuildDependsOn)%3C/BuildDependsOn%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%3C/PropertyGroup%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%3CPropertyGroup%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3C$(AssemblyName)HostingSupport-Net5Dir%3E%24(MSBuildThisFileDirectory)..\lib\net5.0%2A%3C/HostingSupport-Net5Dir%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3C$(AssemblyName)HostingSupport-MetadataDir%3E%24($(AssemblyName)HostingSupport-Net5Dir)\winmd%3C/$(AssemblyName)HostingSupport-MetadataDir%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3C$(AssemblyName)HostingSupport-RuntimesDir%3E%24(MSBuildThisFileDirectory)..\runtimes%3C/$(AssemblyName)HostingSupport-RuntimesDir%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3C$(AssemblyName)HostingSupport-DependenciesDir%3E%24(MSBuildThisFileDirectory)..\build\native%3C/$(AssemblyName)HostingSupport-DependenciesDir%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3C$(AssemblyName)HostingSupport-IsNative  Condition=&quot;%27%24(TargetFramework)%27 == %27native%27 OR %27%24(TargetFramework)%27 == %27%27&quot;%3Etrue%3C/$(AssemblyName)HostingSupport-IsNative%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3C$(AssemblyName)HostingSupport-IsArmArch Condition=&quot;%27%24(Platform)%27 == %27arm%27 OR %27%24(Platform)%27 == %27arm64%27&quot;%3Etrue%3C/$(AssemblyName)HostingSupport-IsArmArch%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%3C/PropertyGroup%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%3CTarget Name=&quot;$(AssemblyName)AddAuthoredWinMDReference&quot; Condition=&quot;%27%24($(AssemblyName)HostingSupport-IsNative)%27==%27true%27&quot; Outputs=&quot;%40(Reference)&quot;%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3CItemGroup%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3CReference Include=&quot;%24($(AssemblyName)HostingSupport-MetadataDir)\%2A.winmd&quot;%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%09%3CIsWinMDFile%3Etrue%3C/IsWinMDFile%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%09%3CImplementation%3Etrue%3C/Implementation%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3C/Reference%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3C/ItemGroup%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%3C/Target%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%3CTarget Name=&quot;$(AssemblyName)CopyAuthoringDlls&quot; Condition=&quot;%27%24($(AssemblyName)HostingSupport-IsNative)%27==%27true%27&quot; Outputs=&quot;%40(ReferenceCopyLocalPaths)&quot;%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3CItemGroup%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3C!-- Managed, WinRT and SDK.NET dlls --%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3CReferenceCopyLocalPaths Include=&quot;%24($(AssemblyName)HostingSupport-Net5Dir)\%2A.dll&quot;/%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3C!-- Managed DLLs from packages the component depends on --%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3CReferenceCopyLocalPaths Include=&quot;%24($(AssemblyName)HostingSupport-DependenciesDir)\%2A.dll&quot;/%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3C!-- Add the runtimeconfig.json --%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3CReferenceCopyLocalPaths Include=&quot;%24($(AssemblyName)HostingSupport-DependenciesDir)\WinRT.Host.runtimeconfig.json&quot;/%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3C!-- Get the proper WinRT.Host.dll --%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3CReferenceCopyLocalPaths Include=&quot;%24($(AssemblyName)HostingSupport-Net5Dir)\%2A.dll&quot;/%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3C!-- Treat Win32 platform as win-x86 architecture --%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3CReferenceCopyLocalPaths Include=&quot;%24($(AssemblyName)HostingSupport-RuntimeDir)\win-%24(Platform)\native\WinRT.Host.dll&quot;" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%09Condition=&quot;%27%24(Platform)%27==%27x64%27 OR %27%24(Platform)%27==%27x86%27 OR %27%24($(AssemblyName)HostingSupport-IsArmArch)%27==%27true%27&quot;/%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%3CReferenceCopyLocalPaths Include=&quot;%24($(AssemblyName)HostingSupport-RuntimeDir)\win-x86\native\WinRT.Host.dll&quot;" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%09%09Condition=&quot;%27%24(Platform)%27==%27Win32%27&quot;/%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%09%3C/ItemGroup%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="%3C/Target%3E" />
    <WriteLinesToFile File="$(ComponentTargetsFile)" Lines="" />
 </Target>

  <!-- For project references, we need to copy the SDK.NET.dll to the output directory -->
  <Target Name="CsWinRTCopySDKRefDllToOutDir" AfterTargets="ResolveRuntimePackAssets">
    <ItemGroup>
      <!-- Local item group to store the SDK.NET.dll -->
      <CsWinRTSDKRefDll Include="@(RuntimePackAsset)" Condition="'%(RuntimePackAsset.DestinationSubPath)' == 'Microsoft.Windows.SDK.NET.dll'" />
      <!-- Use the below item group to package up managed DLLs from one source -->
      <CsWinRTAuthoringDependencyDlls Include="@(CsWinRTSDKRefDll)" />
      <!-- Make sure it is copied out -->
      <_ThisProjectItemstoCopyToOutputDirectory Include="@(CsWinRTSDKRefDll)">
        <Link>%(FileName)%(Extension)</Link>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <TargetPath>Microsoft.Windows.SDK.NET.dll</TargetPath>
      </_ThisProjectItemstoCopyToOutputDirectory>
    </ItemGroup>
  </Target>

  <!-- When an authored component makes a nupkg, add the necessary hosting assets to the package -->
  <Target Name="CsWinRTIncludeHostDlls" DependsOnTargets="GenerateTransitiveTargets" BeforeTargets="AfterBuild" Outputs="@(Content)">
    <!-- When packing, include all necessary DLLs and the targets file for DLL copying on the native side -->
    <ItemGroup>
      <!-- We must pack any managed DLLs the component depends on, because a native consumer won't restore them -->
      <Content Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.AssetType)' == 'runtime'">
        <Pack>true</Pack>
        <PackagePath>build\native</PackagePath>
      </Content>

      <!-- Add WinRT.Host.runtimeconfig.json to package -->
      <Content Include="$(ProjectRuntimeConfigFilePath)">
        <Pack>true</Pack>
        <PackagePath>build\native</PackagePath>
      </Content>

      <!-- Store managed dlls the component needs in the target framework dir --> 
      <Content Include="@(CsWinRTAuthoringDependencyDlls)">
        <Pack>true</Pack> 
        <PackagePath>lib\$(TargetFramework)</PackagePath>
      </Content>

      <!-- Pack the WinMD we generated in its own folder, under the managed TFM folder -->
      <Content Include="$(TargetDir)$(AssemblyName).winmd">
        <Pack>true</Pack> 
        <PackagePath>lib\$(TargetFramework)\winmd</PackagePath>
      </Content> 

      <!-- Use a targets file generated for the component -->
      <Content Include="$(ComponentTargetsFile)">
        <Pack>true</Pack>
        <PackagePath>buildTransitive\$(AssemblyName).targets;build\$(AssemblyName).targets</PackagePath>
      </Content>

      <!-- We package a version of WinRT.Host.dll for each possible architecture -->
      <!-- x64 --> 
      <Content Condition="Exists('$(CsWinRTPath)runtimes\win-x64\native\WinRT.Host.dll')" Include="$(CsWinRTPath)runtimes\win-x64\native\WinRT.Host.dll">
        <Pack>true</Pack>
        <PackagePath>runtimes\win-x64\native</PackagePath>
      </Content>
      <!-- x86 --> 
      <Content Condition="Exists('$(CsWinRTPath)runtimes\win-x86\native\WinRT.Host.dll')" Include="$(CsWinRTPath)runtimes\win-x86\native\WinRT.Host.dll">
        <Pack>true</Pack>
        <PackagePath>runtimes\win-x86\native</PackagePath>
      </Content>
      <!-- arm --> 
      <Content Condition="Exists('$(CsWinRTPath)runtimes\win-arm\native\WinRT.Host.dll')" Include="$(CsWinRTPath)runtimes\win-arm\native\WinRT.Host.dll">
        <Pack>true</Pack>
        <PackagePath>runtimes\win-arm\native</PackagePath>
      </Content>
      <!-- arm64 --> 
      <Content Condition="Exists('$(CsWinRTPath)runtimes\win-arm64\native\WinRT.Host.dll')" Include="$(CsWinRTPath)runtimes\win-arm64\native\WinRT.Host.dll">
        <Pack>true</Pack>
        <PackagePath>runtimes\win-arm64\native</PackagePath>
      </Content>
   </ItemGroup>
  </Target>

  <!-- Copy Authored winmd to output folder -->
  <Target Name="CsWinRTPlaceWinMDInOutputFolder" BeforeTargets="AfterBuild">
    <Copy SourceFiles="$(CsWinRTGeneratedFilesDir)\$(AssemblyName).winmd" DestinationFolder="$(TargetDir)" UseHardlinksIfPossible="false" SkipUnchangedFiles="true" />
  </Target>

</Project>
