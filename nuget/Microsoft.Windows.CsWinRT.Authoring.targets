<!--
***********************************************************************************************
Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <PropertyGroup>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <!-- Generate a RuntimeConfig (only for the managed, hosted scenario) -->
    <EnableDynamicLoading Condition="'$(CsWinRTAotExportsEnabled)' != 'true'">true</EnableDynamicLoading>
    <!-- Name the RuntimeConfig properly -->
    <ProjectRuntimeConfigFileName Condition="'$(CsWinRTAotExportsEnabled)' != 'true'">WinRT.Host.runtimeconfig.json</ProjectRuntimeConfigFileName>
    <CsWinRTDetectDependentAuthoringWinMDs Condition="'$(CsWinRTDetectDependentAuthoringWinMDs)'==''">true</CsWinRTDetectDependentAuthoringWinMDs>
    <GetCopyToOutputDirectoryItemsDependsOn>$(GetCopyToOutputDirectoryItemsDependsOn);CsWinRTAuthoring_AddManagedDependencies</GetCopyToOutputDirectoryItemsDependsOn>
    <CsWinRTEnableLogging>$(CsWinRTEnableLogging)</CsWinRTEnableLogging>
  </PropertyGroup>

  <PropertyGroup>
    <CsWinRTAuthoring_Platform Condition="'$(Platform)'=='AnyCPU'">x86</CsWinRTAuthoring_Platform>
    <CsWinRTAuthoring_Platform Condition="'$(Platform)'!='AnyCPU'">$(Platform)</CsWinRTAuthoring_Platform>
  </PropertyGroup>

  <ItemGroup>
    <CompilerVisibleProperty Include="AssemblyName" />
    <CompilerVisibleProperty Include="AssemblyVersion" />
    <CompilerVisibleProperty Include="CsWinRTComponent" />
    <CompilerVisibleProperty Include="CsWinRTEnableLogging" />
    <CompilerVisibleProperty Include="CsWinRTGeneratedFilesDir" />
    <CompilerVisibleProperty Include="CsWinRTExe" />
    <CompilerVisibleProperty Include="CsWinRTExeTFM" />
    <CompilerVisibleProperty Include="CsWinRTKeepGeneratedSources" />
    <CompilerVisibleProperty Include="CsWinRTWindowsMetadata" />
    <CompilerVisibleProperty Include="CsWinRTGenerateProjection" />
    <CompilerVisibleProperty Include="CsWinRTAuthoringInputs" />
  </ItemGroup>

  <!-- Note this runs before the msbuild editor config file is generated because that is what is used to pass properties to the source generator. -->
  <Target Name="CsWinRTSetAuthoringWinMDs" BeforeTargets="GenerateMSBuildEditorConfigFile;GenerateMSBuildEditorConfigFileCore" DependsOnTargets="CsWinRTRemoveWinMDReferences;GetAssemblyVersion;CsWinRTPrepareProjection" Condition="$(CsWinRTEnabled)">
    <!-- Try to find WinMDs for respective projection DLLs by looking for WinMDs in the packages they come from. -->
    <ItemGroup Condition="'$(CsWinRTDetectDependentAuthoringWinMDs)'=='true'">
      <_CsWinRTRuntimeCopyLocalItemsFromNuGetPackage Include="@(RuntimeCopyLocalItems->HasMetadata('NuGetPackageVersion'))" />
      <_CsWinRTDetectedPackages Include="%(_CsWinRTRuntimeCopyLocalItemsFromNuGetPackage.NuGetPackageId)\%(_CsWinRTRuntimeCopyLocalItemsFromNuGetPackage.NuGetPackageVersion)" Condition="@(_CsWinRTRuntimeCopyLocalItemsFromNuGetPackage->Count()) > 0" />
      <_CsWinRTDetectedDistinctPackages Include="@(_CsWinRTDetectedPackages->Distinct())" />
      <CsWinRTAuthoringDetectedWinMDs Include="$([MSBuild]::EnsureTrailingSlash($(NuGetPackageRoot)))%(_CsWinRTDetectedDistinctPackages.Identity)\**\*.winmd" Condition="@(_CsWinRTDetectedDistinctPackages->Count()) > 0" />
    </ItemGroup>

    <ItemGroup>
      <CsWinRTAuthoringWinMDs Include="@(CsWinRTAuthoringDetectedWinMDs)" />
      <CsWinRTAuthoringWinMDs Include="@(CsWinRTInputs)" />
      <CsWinRTAuthoringDistinctWinMDs Include="@(CsWinRTAuthoringWinMDs->Distinct())" />
    </ItemGroup>
    
    <PropertyGroup>
      <CsWinRTAuthoringInputs>$(CsWinRTAuthoringInputs) @(CsWinRTAuthoringDistinctWinMDs->'"%(FullPath)"', ' ') </CsWinRTAuthoringInputs>
    </PropertyGroup>    
  </Target>

  <!--
    For Project Reference consumers, copy the necessary WinRT DLLs to output directory.
    Only include these if we are not generating native exports for NativeAOT.
  --> 
  <ItemGroup Condition="'$(CsWinRTAotExportsEnabled)' != 'true'"> 

    <None Condition="Exists('$(CsWinRTPath)lib\net6.0\WinRT.Host.Shim.dll')" Include="$(CsWinRTPath)lib\net6.0\WinRT.Host.Shim.dll">
      <TargetPath>WinRT.Host.Shim.dll</TargetPath>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

    <None Condition="Exists('$(CsWinRTPath)hosting\$(CsWinRTAuthoring_Platform)\native\WinRT.Host.dll')" 
          Include="$(CsWinRTPath)hosting\$(CsWinRTAuthoring_Platform)\native\WinRT.Host.dll">
      <TargetPath>WinRT.Host.dll</TargetPath>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

    <None Condition="Exists('$(CsWinRTPath)hosting\$(CsWinRTAuthoring_Platform)\native\en-US\WinRT.Host.dll.mui')"
          Include="$(CsWinRTPath)hosting\$(CsWinRTAuthoring_Platform)\native\en-US\WinRT.Host.dll.mui">
      <TargetPath>WinRT.Host.dll.mui</TargetPath>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

 </ItemGroup>

  <!--
    Any managed dependencies of the WinRT component won't automatically be brought 
    in by a referencing C++ app, so we manually set them to be copied here. Only
    needed when not using NativeAOT (as there's no additional managed .dll-s there).
    We depend on ResolveAssemblyReferences to make sure any duplicate references of
    different versions are resolved to the latest version.
   -->
  <Target Name="CsWinRTAuthoring_AddManagedDependencies"
          BeforeTargets="GetCopyToOutputDirectoryItems"
          DependsOnTargets="ResolveAssemblyReferences"
          Returns="@(AllItemsFullPathWithTargetPath)">

    <ItemGroup Condition="'$(CsWinRTAotExportsEnabled)' != 'true'">
      
      <!-- Make sure all managed binaries/projections are shared across project references made by native apps -->
      <AllItemsFullPathWithTargetPath Include="@(ReferenceCopyLocalPaths)" 
        Condition="'%(ReferenceCopyLocalPaths.AssetType)' == 'runtime' or '%(ReferenceCopyLocalPaths.CopyLocal)' == 'true'">
        <TargetPath>%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(ReferenceCopyLocalPaths.Filename)%(ReferenceCopyLocalPaths.Extension)</TargetPath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </AllItemsFullPathWithTargetPath>

    </ItemGroup>

  </Target>

  <!-- Add the RuntimeConfig to output of project reference consumers -->
  <Target Name="CsWinRTAuthoring_CopyRuntimeConfigJson" 
          AfterTargets="GenerateBuildRuntimeConfigurationFiles" 
          BeforeTargets="GetCopyToOutputDirectoryItems;_GetCopyToOutputDirectoryItemsFromThisProject">

    <ItemGroup Condition="'$(CsWinRTAotExportsEnabled)' != 'true'">

      <AllItemsFullPathWithTargetPath Include="$(ProjectRuntimeConfigFilePath)">
        <TargetPath>$([System.IO.Path]::GetFileName($(ProjectRuntimeConfigFilePath)))</TargetPath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </AllItemsFullPathWithTargetPath>

      <AllPublishItemsFullPathWithTargetPath Include="$(ProjectRuntimeConfigFilePath)">
        <TargetPath>$([System.IO.Path]::GetFileName($(ProjectRuntimeConfigFilePath)))</TargetPath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </AllPublishItemsFullPathWithTargetPath>
    
    </ItemGroup>
  
  </Target>

  <!-- Because we remove this .dll during GetTargetPath, we have to make sure it gets placed in the output directory -->
  <Target Name="CsWinRTAuthoring_OutputManagedDll" DependsOnTargets="GetTargetPathWithTargetPlatformMoniker" BeforeTargets="GetTargetPath">
    
    <ItemGroup> 
      <AllItemsFullPathWithTargetPath Include="@(TargetPathWithTargetPlatformMoniker)">
        <TargetPath>%(Filename)%(Extension)</TargetPath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </AllItemsFullPathWithTargetPath>

      <AllPublishItemsFullPathWithTargetPath Include="@(TargetPathWithTargetPlatformMoniker)">
        <TargetPath>%(Filename)%(Extension)</TargetPath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory> 
      </AllPublishItemsFullPathWithTargetPath>
    </ItemGroup>

  </Target>

  <!-- Update the project to only output the assembly's .winmd -->
  <Target Name="GetTargetPath" DependsOnTargets="CsWinRTAuthoring_OutputManagedDll" Returns="@(TargetPathWithTargetPlatformMoniker)">
    <ItemGroup>
      <!-- Clear the .dll -->
      <TargetPathWithTargetPlatformMoniker Remove="@(TargetPathWithTargetPlatformMoniker)" />
      <!-- Add the .winmd -->
      <TargetPathWithTargetPlatformMoniker Include="$(TargetDir)$(AssemblyName).winmd">
        <!-- implementation is NOT $(AssemblyName).dll (unless NativeAOT publishing is used) -->
        <Implementation Condition="'$(CsWinRTAotExportsEnabled)' != 'true'">WinRT.Host.dll</Implementation>
        <Implementation Condition="'$(CsWinRTAotExportsEnabled)' == 'true'">$(AssemblyName).dll</Implementation>
        <!-- show to c++ compiler (native case) and dotnet sdk (managed case) -->
        <ResolveableAssembly>true</ResolveableAssembly>
        <!-- Used by the dotnet sdk -->
        <ManagedImplementation>$(TargetDir)$(AssemblyName).dll</ManagedImplementation>
        <FileType>winmd</FileType>
        <WinMDFile>true</WinMDFile>
        <BuildReference>true</BuildReference>
        <Primary>true</Primary>
      </TargetPathWithTargetPlatformMoniker>
    </ItemGroup>
    
  </Target>

  <!-- Prevent C++ apps from thinking there is a framework mismatch by setting our target framework to blank.
       Note, this does prevent C#/WinRT apps from cross-platform targeting, but a netcore3.1 app wouldn't use C#/WinRT anyway -->
  <Target Name="GetTargetFrameworks" Returns="@(_ThisProjectBuildMetadata)">
    
    <ItemGroup>
    
      <_ThisProjectBuildMetadata Include="$(MSBuildProjectFullPath)">
        <TargetFrameworks></TargetFrameworks>
        <TargetFrameworkMonikers></TargetFrameworkMonikers>
        <TargetPlatformMonikers></TargetPlatformMonikers>
        <HasSingleTargetFramework>true</HasSingleTargetFramework>
        <IsRidAgnostic>true</IsRidAgnostic>
      </_ThisProjectBuildMetadata>
    
    </ItemGroup>

  </Target>

<!-- Each component will need the transitive targets modified to be for their app,
     so we rename a few fields in the XML by changing "CsWinRT" to "$(AssemblyName)" -->
  <Target Name="CsWinRTGenerateTransitiveTargets" BeforeTargets="CsWinRTIncludeHostDlls"> 

    <!-- Use the Authoring.Transitive targets as a template to rewrite for the authoring component -->
    <Copy SourceFiles="$(MSBuildThisFileDirectory)Microsoft.Windows.CsWinRT.Authoring.Transitive.targets" 
          DestinationFolder="$(CsWinRTGeneratedFilesDir)" UseHardlinksIfPossible="false" SkipUnchangedFiles="true" />

    <PropertyGroup>
      <AuthoringTransitiveTargets>$(CsWinRTGeneratedFilesDir)\Microsoft.Windows.CsWinRT.Authoring.Transitive.targets</AuthoringTransitiveTargets>
      
      <PeekQuery_Depends1>Project/PropertyGroup/ResolveReferencesDependsOn/text()</PeekQuery_Depends1>
      <PokeQuery_Depends1>Project/PropertyGroup/ResolveReferencesDependsOn</PokeQuery_Depends1>
      
      <PeekQuery_Depends2>Project/PropertyGroup/BuildDependsOn/text()</PeekQuery_Depends2>
      <PokeQuery_Depends2>Project/PropertyGroup/BuildDependsOn</PokeQuery_Depends2>
      
      <PeekQuery_Target1>Project/Target[@Name='CsWinRTAddAuthoredWinMDReference']/@Name</PeekQuery_Target1>
      <PokeQuery_Target1>Project/Target[@Name='CsWinRTAddAuthoredWinMDReference']/@Name</PokeQuery_Target1>

      <PeekQuery_Target2>Project/Target[@Name='CsWinRTCopyAuthoringDlls']/@Name</PeekQuery_Target2>
      <PokeQuery_Target2>Project/Target[@Name='CsWinRTCopyAuthoringDlls']/@Name</PokeQuery_Target2>
    </PropertyGroup>

    <!-- Peeks -->

    <XmlPeek XmlInputPath="$(AuthoringTransitiveTargets)" Query="$(PeekQuery_Depends1)">
      <Output TaskParameter="Result" ItemName="Peeked_Depends1" />
    </XmlPeek>

    <XmlPeek XmlInputPath="$(AuthoringTransitiveTargets)" Query="$(PeekQuery_Depends2)">
      <Output TaskParameter="Result" ItemName="Peeked_Depends2" />
    </XmlPeek>

    <XmlPeek XmlInputPath="$(AuthoringTransitiveTargets)" Query="$(PeekQuery_Target1)">
      <Output TaskParameter="Result" ItemName="Peeked_Target1" />
    </XmlPeek>

    <XmlPeek XmlInputPath="$(AuthoringTransitiveTargets)" Query="$(PeekQuery_Target2)">
      <Output TaskParameter="Result" ItemName="Peeked_Target2" />
    </XmlPeek>

    <PropertyGroup>
      <Flat_Peeked_Depends1>@(Peeked_Depends1)</Flat_Peeked_Depends1>      
      <Flat_Peeked_Depends2>@(Peeked_Depends2)</Flat_Peeked_Depends2>      
      <Flat_Peeked_Target1>@(Peeked_Target1)</Flat_Peeked_Target1>
      <Flat_Peeked_Target2>@(Peeked_Target2)</Flat_Peeked_Target2>
    </PropertyGroup>

    <!-- Transform the fetched xml nodes -->
    <PropertyGroup>      
      <Transformed1>$([System.String]::Copy('$(Flat_Peeked_Depends1)').Replace('CsWinRT','$(AssemblyName)').Replace(".","_"))</Transformed1>
      <Transformed2>$([System.String]::Copy('$(Flat_Peeked_Depends2)').Replace('CsWinRT','$(AssemblyName)').Replace(".","_"))</Transformed2>
      <Transformed3>$([System.String]::Copy('$(Flat_Peeked_Target1)').Replace('CsWinRT','$(AssemblyName)').Replace(".","_"))</Transformed3>
      <Transformed4>$([System.String]::Copy('$(Flat_Peeked_Target2)').Replace('CsWinRT','$(AssemblyName)').Replace(".","_"))</Transformed4>
    </PropertyGroup>

    <!-- Change the target names -->
    <XmlPoke XmlInputPath="$(AuthoringTransitiveTargets)" Query="$(PokeQuery_Depends1)" Value="$(Transformed1)"/>
    <XmlPoke XmlInputPath="$(AuthoringTransitiveTargets)" Query="$(PokeQuery_Depends2)" Value="$(Transformed2)"/>
    <XmlPoke XmlInputPath="$(AuthoringTransitiveTargets)" Query="$(PokeQuery_Target1)" Value="$(Transformed3)"/>
    <XmlPoke XmlInputPath="$(AuthoringTransitiveTargets)" Query="$(PokeQuery_Target2)" Value="$(Transformed4)"/>

  </Target>

  <!-- When an authored component makes a nupkg, add the necessary hosting assets to the package -->
  <Target Name="CsWinRTIncludeHostDlls" DependsOnTargets="CsWinRTGenerateTransitiveTargets" BeforeTargets="AfterBuild" Outputs="@(Content)">
    
    <!--
      Include all assets that are shared across all configurations.
      For instance, the .winmd file is always needed.
    -->
    <ItemGroup>

      <!-- Pack any XAML resource PRI files next to the .winmd -->
      <Content Include="$(ProjectPriFullPath)">
        <Pack>true</Pack>
        <PackagePath>lib\$(TargetFramework)\winmd</PackagePath>
      </Content>    

      <!-- Pack the WinMD we generated in its own folder, under the managed TFM folder -->
      <Content Include="$(TargetDir)$(AssemblyName).winmd">
        <Pack>true</Pack> 
        <PackagePath>lib\$(TargetFramework)\winmd</PackagePath>
      </Content> 

      <!-- Use a targets file generated for the component -->
      <Content Include="$(AuthoringTransitiveTargets)">
        <Pack>true</Pack>
        <PackagePath>buildTransitive\$(AssemblyName).targets;build\$(AssemblyName).targets</PackagePath>
      </Content>
    </ItemGroup>

    <!--
      Include all necessary DLLs and the targets file for DLL copying on the native side.
      These additional assets are only used when the WinRT component is a managed assembly.
    -->
    <ItemGroup Condition="'$(CsWinRTAotExportsEnabled)' != 'true'">

      <Content  Include="$(CsWinRTPath)lib\net6.0\WinRT.Host.Shim.dll">
        <Pack>true</Pack>
        <PackagePath>lib\$(TargetFramework)</PackagePath>
      </Content>
    
      <!-- We must pack any managed DLLs the component depends on, because a native consumer won't restore them -->
      <Content Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.AssetType)' == 'runtime'">
        <Pack>true</Pack>
        <PackagePath>build\native</PackagePath>
      </Content>

      <!-- Add WinRT.Host.runtimeconfig.json to package -->
      <Content Include="$(ProjectRuntimeConfigFilePath)">
        <Pack>true</Pack>
        <PackagePath>build\native</PackagePath>
      </Content>

      <!-- Store managed dlls the component needs in the target framework dir --> 
      <Content Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.FileName)' == 'WinRT.Runtime'">
        <Pack>true</Pack> 
        <PackagePath>lib\$(TargetFramework)</PackagePath>
      </Content>

      <Content Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.FileName)' == 'Microsoft.Windows.NET.SDK'">
        <Pack>true</Pack> 
        <PackagePath>lib\$(TargetFramework)</PackagePath>
      </Content>

      <!-- We package a version of WinRT.Host.dll for each possible architecture -->
      <Content Condition="Exists('$(CsWinRTPath)hosting\x64\native\WinRT.Host.dll')" Include="$(CsWinRTPath)hosting\x64\native\WinRT.Host.dll">
        <Pack>true</Pack>
        <PackagePath>hosting\x64\native</PackagePath>
      </Content>
      <Content Condition="Exists('$(CsWinRTPath)hosting\x86\native\WinRT.Host.dll')" Include="$(CsWinRTPath)hosting\x86\native\WinRT.Host.dll">
        <Pack>true</Pack>
        <PackagePath>hosting\x86\native</PackagePath>
      </Content> 
      <Content Condition="Exists('$(CsWinRTPath)hosting\arm\native\WinRT.Host.dll')" Include="$(CsWinRTPath)hosting\arm\native\WinRT.Host.dll">
        <Pack>true</Pack>
        <PackagePath>hosting\arm\native</PackagePath>
      </Content>
      <Content Condition="Exists('$(CsWinRTPath)hosting\arm64\native\WinRT.Host.dll')" Include="$(CsWinRTPath)hosting\arm64\native\WinRT.Host.dll">
        <Pack>true</Pack>
        <PackagePath>hosting\arm64\native</PackagePath>
      </Content>
      <!-- Package the MUI for WinRT.Host error strings -->
      <Content Condition="Exists('$(CsWinRTPath)hosting\x64\native\en-us\WinRT.Host.dll.mui')" Include="$(CsWinRTPath)hosting\x64\native\en-us\WinRT.Host.dll.mui">
        <Pack>true</Pack>
        <PackagePath>hosting\x64\native\en-us</PackagePath>
      </Content>
      <Content Condition="Exists('$(CsWinRTPath)hosting\x86\native\en-us\WinRT.Host.dll.mui')" Include="$(CsWinRTPath)hosting\x86\native\en-us\WinRT.Host.dll.mui">
        <Pack>true</Pack>
        <PackagePath>hosting\x86\native\en-us</PackagePath>
      </Content>
      <Content Condition="Exists('$(CsWinRTPath)hosting\arm\native\en-us\WinRT.Host.dll.mui')" Include="$(CsWinRTPath)hosting\arm\native\en-us\WinRT.Host.dll.mui">
        <Pack>true</Pack>
        <PackagePath>hosting\arm\native\en-us</PackagePath>
      </Content>
      <Content Condition="Exists('$(CsWinRTPath)hosting\arm64\native\en-us\WinRT.Host.dll.mui')" Include="$(CsWinRTPath)hosting\arm64\native\en-us\WinRT.Host.dll.mui">
        <Pack>true</Pack>
        <PackagePath>hosting\arm64\native\en-us</PackagePath>
      </Content>
   </ItemGroup>

  </Target>

  <!-- Copy Authored winmd to output folder -->
  <Target Name="CsWinRTPlaceWinMDInOutputFolder" BeforeTargets="AfterBuild">
    
    <Copy SourceFiles="$(CsWinRTGeneratedFilesDir)\$(AssemblyName).winmd" DestinationFolder="$(TargetDir)" UseHardlinksIfPossible="false" SkipUnchangedFiles="true" />
    
  </Target>

</Project>
