<!--
  Copyright (c) Microsoft Corporation. Licensed under the MIT License
--><!--
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    --><!-- Replaces AppxManifest WinRT registrations --><!--
    <Target
        Name="_ReplaceWinRTRegistrations"
        BeforeTargets="_CreateFinalAppxManifestItem"
        AfterTargets="_GenerateCurrentProjectAppxManifest"
        Inputs="$(MSBuildAllProjects);@(_GenerateCurrentProjectAppxManifestInput)"
        Outputs="$(FinalAppxManifestName).incremental" >

        <ReplaceWinRTRegistrations
            FullPathToAppxManifest="$(FinalAppxManifestName)"
            FullPathToLiftedXAMLWinRTRegistrations="$(WinUIClassRegistrationsDir)LiftedWinRTClassRegistrations.xml"
            PathToXAMLWinRTImplementations="$(PathToXAMLWinRTImplementations)"
         />

        <Touch
           Files="$(FinalAppxManifestName).incremental"
           AlwaysCreate="true"
         />
    </Target>

    <UsingTask TaskName="ReplaceWinRTRegistrations" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <FullPathToAppxManifest ParameterType="System.String" Required="true" />
            <FullPathToLiftedXAMLWinRTRegistrations ParameterType="System.String" Required="true" />
            <PathToXAMLWinRTImplementations ParameterType="System.String" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml" />
            <Using Namespace="System.Xml" />
            <Using Namespace="System.Reflection" />
            <Using Namespace="System.Runtime.InteropServices.WindowsRuntime" />
            <Using Namespace="System.Collections.Generic" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                // Load AppxManifest.xml
                XmlDocument appxManifest = new XmlDocument();
                appxManifest.Load(FullPathToAppxManifest);

                XmlNamespaceManager namespaceManager = new XmlNamespaceManager(appxManifest.NameTable);
                namespaceManager.AddNamespace("w", "http://schemas.microsoft.com/appx/manifest/foundation/windows10");

                // If there exists an existing Extensions node, we'll remove any Microsoft.UI.Xaml.dll, Microsoft.Web.WebView2.Core.dll entry in it
                // and add the correct DLL mapping. Otherwise, if there doesn't, we'll create one and add it.
                XmlNode extensionsNode = null;

                foreach (XmlNode node in appxManifest.DocumentElement.SelectNodes("//w:Package/w:Extensions", namespaceManager))
                {
                    extensionsNode = node;
                    break;
                }

                if (extensionsNode != null)
                {
                    XmlNodeList xmlNodeList = appxManifest.DocumentElement.SelectNodes("//w:Package/w:Extensions/w:Extension", namespaceManager);

                    // Remove "Microsoft.UI.Xaml.dll", "Microsoft.Web.WebView2.Core.dll", and
            	    // "Microsoft.ApplicationModel.Resources.dll" registrations from the 
                    // AppxManifest file as we will be inserting the entries ourselves
                    foreach (XmlNode node in xmlNodeList)
                    {
                        XmlNode pathNode = node.SelectSingleNode("w:InProcessServer/w:Path", namespaceManager);
                        if (pathNode.InnerText.Equals("Microsoft.UI.Xaml.dll", StringComparison.InvariantCultureIgnoreCase) ||
                            pathNode.InnerText.Equals("Microsoft.Web.WebView2.Core.dll", StringComparison.InvariantCultureIgnoreCase) ||
                            pathNode.InnerText.Equals("Microsoft.ApplicationModel.Resources.dll", StringComparison.InvariantCultureIgnoreCase))
                        {
                            extensionsNode.RemoveChild(node);
                        }
                    }
                }
                else
                {
                    extensionsNode = appxManifest.CreateElement("Extensions", "http://schemas.microsoft.com/appx/manifest/foundation/windows10");
                    appxManifest.DocumentElement.AppendChild(extensionsNode);
                }

                // Load correct WinRT registration file created during build.  These entries have the correct implemetation DLLs.
                XmlDocument newRegistrations = new XmlDocument();
                newRegistrations.Load(FullPathToLiftedXAMLWinRTRegistrations);
                XmlNamespaceManager namespaceManager2 = new XmlNamespaceManager(newRegistrations.NameTable);
                namespaceManager2.AddNamespace("w", "http://schemas.microsoft.com/appx/manifest/foundation/windows10");
                XmlNodeList newRegistrationNodes = newRegistrations.DocumentElement.SelectNodes("/w:Data/w:Extension", namespaceManager2);

                // Add entries for all Microsoft.UI.Xaml types in the AppxManifest
                foreach (XmlNode node in newRegistrationNodes)
                {
                    // If we have a path to our implementation DLLs, we'll add that here.
                    if (!string.IsNullOrWhiteSpace(PathToXAMLWinRTImplementations))
                    {
                        XmlNode pathNode = node.SelectSingleNode("w:InProcessServer/w:Path", namespaceManager);
                        pathNode.InnerText = PathToXAMLWinRTImplementations + pathNode.InnerText;
                    }
                    XmlNode importNode = extensionsNode.OwnerDocument.ImportNode(node, true);
                    extensionsNode.AppendChild(importNode);
                }

                // Save the updated AppxManifest.xml file
                appxManifest.Save(FullPathToAppxManifest);

            ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>-->