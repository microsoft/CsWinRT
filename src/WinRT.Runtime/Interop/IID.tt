<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".g.cs"#>
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace WinRT.Interop
{
    /// <summary>IIDs for common COM/WinRT interfaces.</summary>
#if EMBED
    internal
#else 
    public
#endif
    static class IID
    {
<#
var entries = new (string Name, string IID)[]
{
    ("IUnknown", "00000000-0000-0000-C000-000000000046"),
    ("IInspectable", "AF86E2E0-B12D-4C6A-9C5A-D7AA65101E90"),
    ("IWeakReference", "00000037-0000-0000-C000-000000000046"),
    ("IWeakReferenceSource", "00000038-0000-0000-C000-000000000046"),
    ("IActivationFactory", "00000035-0000-0000-C000-000000000046"),
    ("IAgileObject", "94EA2B94-E9CC-49E0-C0FF-EE64CA8F5B90"),
    ("IMarshal", "00000003-0000-0000-C000-000000000046"),
    ("IContextCallback", "000001DA-0000-0000-C000-000000000046"),
    ("ICallbackWithNoReentrancyToApplicationSTA", "0A299774-3E4E-FC42-1D9D-72CEE105CA57")
};

for (int i = 0; i < entries.Length; i++)
{
    if (i > 0) WriteLine("");

    var bytes = new Guid(entries[i].IID).ToByteArray();
    var hex = bytes.Select(b => $"0x{b.ToString("X2").ToUpperInvariant()}").ToArray();
#>
        /// <summary>The IID for <c><#=entries[i].Name#></c> (<#=entries[i].IID#>).</summary>
        public static ref readonly Guid IID_<#=entries[i].Name#>
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]   
            get
            {
                ReadOnlySpan<byte> data = new byte[]
                {
                    <#=hex[0]#>, <#=hex[1]#>, <#=hex[2]#>, <#=hex[3]#>,
                    <#=hex[4]#>, <#=hex[5]#>,
                    <#=hex[6]#>, <#=hex[7]#>,
                    <#=hex[8]#>,
                    <#=hex[9]#>,
                    <#=hex[10]#>,
                    <#=hex[11]#>,
                    <#=hex[12]#>,
                    <#=hex[13]#>,
                    <#=hex[14]#>,
                    <#=hex[15]#>
                };

                return ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data));
            }
        }
<#
}
#>
    }
}