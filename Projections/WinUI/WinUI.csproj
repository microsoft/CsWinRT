<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net5.0</TargetFrameworks>
    <Platforms>x64;x86</Platforms>
    <LangVersion>preview</LangVersion>
  </PropertyGroup>

  <PropertyGroup>
    <GenerateTestProjection Condition="'$(GenerateTestProjection)$(Configuration)' == 'Release'">true</GenerateTestProjection>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <NoWarn>8305;0618</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="System.Numerics.Vectors" Version="4.5.0" />
    <ProjectReference Include="..\..\WinRT.Runtime\WinRT.Runtime.csproj" />
    <ProjectReference Include="..\..\cswinrt\cswinrt.vcxproj" />
    <ProjectReference Include="..\Windows\Windows.csproj" />
    <PackageReference Include="Microsoft.WinUI" Version="[$(MicrosoftWinUIVersion)]" GeneratePathProperty="true">
      <ExcludeAssets>build; buildtransitive; compile; runtime</ExcludeAssets>
    </PackageReference>
  </ItemGroup>

  <Target Name="GenerateProjection" Condition="'$(GenerateTestProjection)' == 'true'">
    <PropertyGroup>
      <!--PkgMicrosoft_WinUI is set in in obj\*.csproj.nuget.g.props with TargetFramework condition, doesn't support multi-targeting-->
      <PkgMicrosoft_WinUI Condition="'$(PkgMicrosoft_WinUI)'==''">$([MSBuild]::NormalizeDirectory('$(NuGetPackageRoot)', 'microsoft.winui', '$(MicrosoftWinUIVersion)'))</PkgMicrosoft_WinUI>
    </PropertyGroup>
    <ItemGroup>
      <!--Explicitly reference WinUI winmds from TFM uap10.0-->
      <ReferenceWinMDs Include="$(PkgMicrosoft_WinUI)/**/*.winmd" />
      <ReferenceWinMDs Include="@(ReferencePath)" Condition="'%(ReferencePath.WinMDFile)' == 'true'" />
    </ItemGroup>
    <PropertyGroup>
      <CsWinRTVerbosity>high</CsWinRTVerbosity>
      <CsWinRTResponseFile>$(GeneratedFilesDir)cswinrt_winui.rsp</CsWinRTResponseFile>
      <CsWinRTCommand>$(CsWinrtExe) %40"$(CsWinRTResponseFile)"</CsWinRTCommand>
    </PropertyGroup>
    <PropertyGroup>
      <CsWinRTParams>
-verbose
-target $(TargetFramework)
-in 10.0.18362.0
-in @(ReferenceWinMDs->'"%(FullPath)"', ' ')
-out "$(GeneratedFilesDir.TrimEnd('\'))"
-exclude Windows
-include Microsoft
# The current WinUI nuget incorrectly references several Windows.* types that should be
# Microsoft.* types instead.  Temporarily include these to enable the build
-include Windows.UI.Xaml.Interop.Type
-include Windows.UI.Xaml.Interop.NotifyCollectionChangedAction
-include Windows.UI.Xaml.Markup.ContentPropertyAttribute
-include Windows.UI.Xaml.StyleTypedPropertyAttribute
-include Windows.UI.Xaml.TemplatePartAttribute
-include Windows.UI.Xaml.TemplateVisualStateAttribute
-include Windows.UI.Xaml.Data.BindableAttribute
-include Windows.UI.Xaml.Markup.ContentPropertyAttribute
-include Windows.UI.Xaml.Markup.FullXamlMetadataProviderAttribute
-include Windows.UI.Xaml.Markup.MarkupExtensionReturnTypeAttribute
-include Windows.UI.Xaml.Media.Animation.ConditionallyIndependentlyAnimatableAttribute
-include Windows.UI.Xaml.Media.Animation.IndependentlyAnimatableAttribute
-include Windows.UI.Xaml.Media.Animation.ConditionallyIndependentlyAnimatableAttribute
      </CsWinRTParams>
    </PropertyGroup>
    <MakeDir Directories="$(GeneratedFilesDir)" />
    <WriteLinesToFile File="$(CsWinRTResponseFile)" Lines="$(CsWinRTParams)" Overwrite="true" WriteOnlyWhenDifferent="true" />
    <Message Text="$(CsWinRTCommand)" Importance="$(CsWinRTVerbosity)" />
    <Exec Command="$(CsWinRTCommand)" />
  </Target>

  <Target Name="IncludeProjection" DependsOnTargets="GenerateProjection" BeforeTargets="CoreCompile">
    <ItemGroup>
      <Compile Include="$(GeneratedFilesDir)*.cs" Exclude="@(Compile)" />
    </ItemGroup>
  </Target>

</Project>
