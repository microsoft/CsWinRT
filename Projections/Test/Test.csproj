<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net5.0</TargetFrameworks>
    <Platforms>x64;x86</Platforms>
  </PropertyGroup>
  
  <ItemGroup>
    <ProjectReference Include="..\..\TestComponentCSharp\TestComponentCSharp.vcxproj" />
    <ProjectReference Include="..\..\TestWinRT\TestComponent\TestComponent.vcxproj" />
	<ProjectReference Include="..\..\TestWinRT\test_component_base\test_component_base.vcxproj" />
	<ProjectReference Include="..\..\TestWinRT\test_component_derived\test_component_derived.vcxproj" />
    <PackageReference Include="System.Numerics.Vectors" Version="4.5.0" />
    <ProjectReference Include="..\..\WinRT.Runtime\WinRT.Runtime.csproj" />
    <ProjectReference Include="..\..\cswinrt\cswinrt.vcxproj" />
    <ProjectReference Include="..\Windows\Windows.csproj" />
    <ProjectReference Include="..\WinUI\WinUI.csproj" />
    <InternalsVisibleTo Include="UnitTest" />
  </ItemGroup>

  <PropertyGroup>
    <CsWinRTIncludes>TestComponent;TestComponentCSharp;test_component_base;test_component_derived;</CsWinRTIncludes>
    <!--PkgMicrosoft_WinUI is set in in obj\*.csproj.nuget.g.props with TargetFramework condition, doesn't support multi-targeting-->
    <PkgMicrosoft_WinUI Condition="'$(PkgMicrosoft_WinUI)'==''">$([MSBuild]::NormalizeDirectory('$(NuGetPackageRoot)', 'microsoft.winui', '$(MicrosoftWinUIVersion)'))</PkgMicrosoft_WinUI>
  </PropertyGroup>
  <ItemGroup>
    <!--Explicitly reference WinUI winmds from TFM uap10.0-->
    <CsWinRTInputs Include="$(PkgMicrosoft_WinUI)/**/*.winmd" />
  </ItemGroup>

</Project>
